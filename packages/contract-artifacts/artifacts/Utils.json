{
  "contractName": "Utils",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.5.4+commit.9549d8ff\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/benediamond/anonymous-zether/packages/protocol/contracts/Utils.sol\":\"Utils\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/benediamond/anonymous-zether/packages/protocol/contracts/Utils.sol\":{\"keccak256\":\"0x3b410db08d55d9540e8e795474410304be456ca3a36beb8c209019344593b267\",\"urls\":[\"bzzr://f5eaba23ec02eb7c30ce30f795aa0d7b1ae29d61d8111e2955a0f505bd1b328a\"]}},\"version\":1}",
  "bytecode": "0x605a602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a723058205c0c9202ef1c88beb84c91821c697b45004cebc4f7147de81c6b2d790eb485f06c6578706572696d656e74616cf50037",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a723058205c0c9202ef1c88beb84c91821c697b45004cebc4f7147de81c6b2d790eb485f06c6578706572696d656e74616cf50037",
  "sourceMap": "58:1579:3:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24",
  "deployedSourceMap": "58:1579:3:-;;;;;;;;",
  "source": "pragma solidity 0.5.4;\npragma experimental ABIEncoderV2;\n\nlibrary Utils {\n\n    uint256 constant GROUP_ORDER = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n    uint256 constant UNITY = 9334303377689037989442018753807510978357674015322511348041267794643984346845; // primitive 2^28th root of unity modulo GROUP_ORDER (not field!)\n\n    function add(uint256 x, uint256 y) internal pure returns (uint256) {\n        return addmod(x, y, GROUP_ORDER);\n    }\n\n    function mul(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulmod(x, y, GROUP_ORDER);\n    }\n\n    function inv(uint256 x) internal view returns (uint256) {\n        return exp(x, GROUP_ORDER - 2);\n    }\n\n    function mod(uint256 x) internal pure returns (uint256) {\n        return x % GROUP_ORDER;\n    }\n\n    function sub(uint256 x, uint256 y) internal pure returns (uint256) {\n        return x >= y ? x - y : GROUP_ORDER - y + x;\n    }\n\n    function neg(uint256 x) internal pure returns (uint256) {\n        return GROUP_ORDER - x;\n    }\n\n    function exp(uint256 base, uint256 exponent) internal view returns (uint256 output) {\n        uint256 order = GROUP_ORDER;\n        assembly {\n            let m := mload(0x40)\n            mstore(m, 0x20)\n            mstore(add(m, 0x20), 0x20)\n            mstore(add(m, 0x40), 0x20)\n            mstore(add(m, 0x60), base)\n            mstore(add(m, 0x80), exponent)\n            mstore(add(m, 0xa0), order)\n            if iszero(staticcall(gas, 0x05, m, 0xc0, m, 0x20)) { // staticcall or call?\n                revert(0, 0)\n            }\n            output := mload(m)\n        }\n    }\n}\n",
  "sourcePath": "/Users/benediamond/anonymous-zether/packages/protocol/contracts/Utils.sol",
  "compiler": {
    "name": "solc",
    "version": "0.5.4+commit.9549d8ff.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.19",
  "updatedAt": "2019-12-26T18:28:14.456Z",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  }
}