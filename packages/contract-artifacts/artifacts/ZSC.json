{
  "contractName": "ZSC",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "epochLength",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_coin",
          "type": "address"
        },
        {
          "name": "_zether",
          "type": "address"
        },
        {
          "name": "_burn",
          "type": "address"
        },
        {
          "name": "_epochLength",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "parties",
          "type": "bytes32[2][]"
        }
      ],
      "name": "TransferOccurred",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "y",
          "type": "bytes32[2][]"
        },
        {
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "simulateAccounts",
      "outputs": [
        {
          "name": "accounts",
          "type": "bytes32[2][2][]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "y",
          "type": "bytes32[2]"
        },
        {
          "name": "c",
          "type": "uint256"
        },
        {
          "name": "s",
          "type": "uint256"
        }
      ],
      "name": "register",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "y",
          "type": "bytes32[2]"
        },
        {
          "name": "bTransfer",
          "type": "uint256"
        }
      ],
      "name": "fund",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "C",
          "type": "bytes32[2][]"
        },
        {
          "name": "D",
          "type": "bytes32[2]"
        },
        {
          "name": "y",
          "type": "bytes32[2][]"
        },
        {
          "name": "u",
          "type": "bytes32[2]"
        },
        {
          "name": "proof",
          "type": "bytes"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "y",
          "type": "bytes32[2]"
        },
        {
          "name": "bTransfer",
          "type": "uint256"
        },
        {
          "name": "u",
          "type": "bytes32[2]"
        },
        {
          "name": "proof",
          "type": "bytes"
        }
      ],
      "name": "burn",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.4+commit.9549d8ff\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"y\",\"type\":\"bytes32[2]\"},{\"name\":\"c\",\"type\":\"uint256\"},{\"name\":\"s\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"y\",\"type\":\"bytes32[2]\"},{\"name\":\"bTransfer\",\"type\":\"uint256\"}],\"name\":\"fund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"epochLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"C\",\"type\":\"bytes32[2][]\"},{\"name\":\"D\",\"type\":\"bytes32[2]\"},{\"name\":\"y\",\"type\":\"bytes32[2][]\"},{\"name\":\"u\",\"type\":\"bytes32[2]\"},{\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"y\",\"type\":\"bytes32[2]\"},{\"name\":\"bTransfer\",\"type\":\"uint256\"},{\"name\":\"u\",\"type\":\"bytes32[2]\"},{\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"y\",\"type\":\"bytes32[2][]\"},{\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"simulateAccounts\",\"outputs\":[{\"name\":\"accounts\",\"type\":\"bytes32[2][2][]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_coin\",\"type\":\"address\"},{\"name\":\"_zether\",\"type\":\"address\"},{\"name\":\"_burn\",\"type\":\"address\"},{\"name\":\"_epochLength\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"parties\",\"type\":\"bytes32[2][]\"}],\"name\":\"TransferOccurred\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/benediamond/anonymous-zether/packages/protocol/contracts/ZSC.sol\":\"ZSC\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/benediamond/anonymous-zether/packages/protocol/contracts/BurnVerifier.sol\":{\"keccak256\":\"0x1b0d77540857e955f7ee412f61ac469bf2b8a104780130162a120f4c2e299a69\",\"urls\":[\"bzzr://7085cdd42bf30e3fd45f23568e395ba450918ee27febba0c6bd853f192ac012d\"]},\"/Users/benediamond/anonymous-zether/packages/protocol/contracts/CashToken.sol\":{\"keccak256\":\"0x82bb618b45f209947dab386268264b59af92d89e32057fcddb43d77444bf5ebd\",\"urls\":[\"bzzr://0e7157c5c1bb4b64fbf43071131558130666196f6e7643e4ca7a5461436f9a29\"]},\"/Users/benediamond/anonymous-zether/packages/protocol/contracts/InnerProductVerifier.sol\":{\"keccak256\":\"0xae109fcaf1c51fe31e65077535d86f941b1d3b00dacafb70ade34bcf84360056\",\"urls\":[\"bzzr://acffea6fa7e90163a00d4623178195f549e8b854d3065897af0d7bab96dd48f9\"]},\"/Users/benediamond/anonymous-zether/packages/protocol/contracts/Utils.sol\":{\"keccak256\":\"0x8042a21e0d68964297468f01088773705e013ec436f4ef23f2c6221837c96a33\",\"urls\":[\"bzzr://c61c9573ebc7bd5f9c81065894fcbf255e2a66550dc82a31348fdf9c4b4d42fe\"]},\"/Users/benediamond/anonymous-zether/packages/protocol/contracts/ZSC.sol\":{\"keccak256\":\"0xebdf52c06865f7bfeead759a3404422a4d329d7715cf0a5958b2ca9344b9db0d\",\"urls\":[\"bzzr://40c7ecd68afb45839568c55fc7793b46e8bb543b2844833a265306359c79f62d\"]},\"/Users/benediamond/anonymous-zether/packages/protocol/contracts/ZetherVerifier.sol\":{\"keccak256\":\"0x453c94b6310c9455bdcc2b7e92780168ecc50f3ec6185678ac3ee0db44fb5d3b\",\"urls\":[\"bzzr://073ab0dd78d848fa0756093ccd5c6fa28035e5e5bf44fd30fbcdc0f7acf9f55a\"]},\"openzeppelin-solidity/contracts/GSN/Context.sol\":{\"keccak256\":\"0x90a3995645af7562d84b9d69363ffa5ae7217714ab61e951bf7bc450f40e4061\",\"urls\":[\"bzzr://51482c01bddf23793bddee43b60ab9578a62948a4f2082def24ea792a553b055\"]},\"openzeppelin-solidity/contracts/access/Roles.sol\":{\"keccak256\":\"0xb002c378d7b82a101bd659c341518953ca0919d342c0a400196982c0e7e7bcdb\",\"urls\":[\"bzzr://bd34c1ce05b5b2b3a62fc02e160f6805b1cadd476854664f433c685b2fda8dad\"]},\"openzeppelin-solidity/contracts/access/roles/MinterRole.sol\":{\"keccak256\":\"0xbe8eef6f2cb4e427f5c5d8a76865ccd06e55a4f1d6671ba312d45bfa705aedbf\",\"urls\":[\"bzzr://946a26eebf5d294534471d07c4dc449ce3123e9fc2994bdfcd99dff1d09cc1af\"]},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\",\"urls\":[\"bzzr://292843005e754e752644f767477ec5ad7a1ffc91ddb18c38b8079c62f3993cad\"]},\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x65a4078c03875c25413a068ce9cfdd7e68a90f8786612d1189c89341e6e3b802\",\"urls\":[\"bzzr://fefcc5ec4e313a66c9fd38375983b5973c528e7e19b6d37c2f1ac6745295e6e2\"]},\"openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\":{\"keccak256\":\"0xa2b957cf89692c504962afb7506999155f83385373f808243246cd5879de5940\",\"urls\":[\"bzzr://812521b94ef1bd30b0a93e14a97a0e79e2bf4cb607aa47c21c8177966a79fd1a\"]},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9\",\"urls\":[\"bzzr://cf2d583b8dce38d0617fdcd65f2fd9f126fe17b7f683b5a515ea9d2762d8b062\"]}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007f576000357c010000000000000000000000000000000000000000000000000000000090048063242e8387146100845780635464befb146100c657806357d775f8146100fe5780635ec7ccfd1461011c57806373663b5f146103f95780637ea9712f14610540575b600080fd5b6100c46004803603608081101561009a57600080fd5b8101908080604001909192919290803590602001909291908035906020019092919050505061065e565b005b6100fc600480360360608110156100dc57600080fd5b8101908080604001909192919290803590602001909291905050506109cc565b005b610106610f48565b6040518082815260200191505060405180910390f35b6103f7600480360360e081101561013257600080fd5b810190808035906020019064010000000081111561014f57600080fd5b82018360208201111561016157600080fd5b8035906020019184604083028401116401000000008311171561018357600080fd5b9190808060200260200160405190810160405280939291908181526020016000905b828210156101fc578484839050604002016002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050815260200190600101906101a5565b5050505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505091929192908035906020019064010000000081111561026057600080fd5b82018360208201111561027257600080fd5b8035906020019184604083028401116401000000008311171561029457600080fd5b9190808060200260200160405190810160405280939291908181526020016000905b8282101561030d578484839050604002016002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050815260200190600101906102b6565b5050505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505091929192908035906020019064010000000081111561037157600080fd5b82018360208201111561038357600080fd5b803590602001918460018302840111640100000000831117156103a557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610f4e565b005b61053e600480360360c081101561040f57600080fd5b8101908080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505091929192908035906020019092919080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050509192919290803590602001906401000000008111156104b857600080fd5b8201836020820111156104ca57600080fd5b803590602001918460018302840111640100000000831117156104ec57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506119ce565b005b6105c16004803603604081101561055657600080fd5b810190808035906020019064010000000081111561057357600080fd5b82018360208201111561058557600080fd5b803590602001918460408302840111640100000000831117156105a757600080fd5b909192939192939080359060200190929190505050612353565b60405180806020018281038252838181518152602001915080516000925b8184101561064d5782849060200190602002015160026000925b8184101561063f5782846020020151600260200280838360005b8381101561062e578082015181840152602081019050610613565b5050505090500192600101926105f9565b9250505092600101926105df565b925050509250505060405180910390f35b610666612b0b565b60016040517f077da99d806abd13c9f15ece5398525119d11e11e9836b2ee7d23f6159ad87d481527f01485efa927f2ad41bff567eec88f32fb0a0f706588b4e41a8d587d008b7f875602082015283604082015260408160608360075afa82169150604060046040830137847f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001036080820152604080820160606040840160075afa821691506040835160808360065afa8216915081151561072757600080fd5b50506000308583600060028110151561073c57fe5b6020020151604051602001808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183600260200280828437600081840152601f19601f82011690508083019250505082600260200280838360005b838110156107c25780820151818401526020810190506107a7565b505050509050019350505050604051602081830303815290604052805190602001206001900490507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001810690508381141515610886576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f496e76616c696420726567697374726174696f6e207369676e6174757265210081525060200191505060405180910390fd5b6000856040516020018082600260200280828437600081840152601f19601f8201169050808301925050509150506040516020818303038152906040528051906020012090506108d58161261f565b15151561094a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4163636f756e7420616c7265616479207265676973746572656421000000000081525060200191505060405180910390fd5b604060048451377f077da99d806abd13c9f15ece5398525119d11e11e9836b2ee7d23f6159ad87d46020840151527f01485efa927f2ad41bff567eec88f32fb0a0f706588b4e41a8d587d008b7f875602080850151015282600560008381526020019081526020016000209060026109c3929190612b39565b50505050505050565b6000826040516020018082600260200280828437600081840152601f19601f820116905080830192505050915050604051602081830303815290604052805190602001209050610a1b8161261f565b1515610a8f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4163636f756e74206e6f742079657420726567697374657265642e000000000081525060200191505060405180910390fd5b610a9881612838565b63ffffffff8211151515610b14576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4465706f73697420616d6f756e74206f7574206f662072616e67652e0000000081525060200191505060405180910390fd5b610b1c612b89565b600560008381526020019081526020016000206000600281101515610b3d57fe5b60020201600280602002604051908101604052809291908260028015610b78576020028201915b815481526020019060010190808311610b64575b50505050509050600160405182518152602083015160208201527f077da99d806abd13c9f15ece5398525119d11e11e9836b2ee7d23f6159ad87d460408201527f01485efa927f2ad41bff567eec88f32fb0a0f706588b4e41a8d587d008b7f8756060820152846080820152604080820160606040840160075afa8216915060408360808360065afa82169150811515610c1157600080fd5b505080600560008481526020019081526020016000206000600281101515610c3557fe5b60020201906002610c47929190612bab565b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015610d4057600080fd5b505af1158015610d54573d6000803e3d6000fd5b505050506040513d6020811015610d6a57600080fd5b81019080805190602001909291905050501515610def576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f5472616e736665722066726f6d2073656e646572206661696c65642e0000000081525060200191505060405180910390fd5b63ffffffff6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610eae57600080fd5b505afa158015610ec2573d6000803e3d6000fd5b505050506040513d6020811015610ed857600080fd5b810190808051906020019092919050505011151515610f42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180612d2b6028913960400191505060405180910390fd5b50505050565b60035481565b600083519050606081604051908082528060200260200182016040528015610f9057816020015b610f7d612beb565b815260200190600190039081610f755790505b509050606082604051908082528060200260200182016040528015610fcf57816020015b610fbc612beb565b815260200190600190039081610fb45790505b50905082885114151561104a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f496e707574206172726179206c656e677468206d69736d61746368210000000081525060200191505060405180910390fd5b60008090505b83811015611441576000878281518110151561106857fe5b906020019060200201516040516020018082600260200280838360005b838110156110a0578082015181840152602081019050611085565b505050509050019150506040516020818303038152906040528051906020012090506110cb8161261f565b151561113f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4163636f756e74206e6f742079657420726567697374657265642e000000000081525060200191505060405180910390fd5b61114881612838565b611150612b0b565b60056000838152602001908152602001600020600280602002604051908101604052809291906000905b828210156111d3578382600202016002806020026040519081016040528092919082600280156111bf576020028201915b8154815260200190600101908083116111ab575b50505050508152602001906001019061117a565b5050505090506001604051825151815260208351015160208201526020850260208e010151516040820152602080860260208f01015101517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd470360608201526040835160808360065afa821691506020830151518152602080840151015160208201528b51604082015260208c01517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd470360608201526040602084015160808360065afa821691508115156112a757600080fd5b505080600560008481526020019081526020016000209060026112cb929190612b39565b5060046000838152602001908152602001600020600280602002604051908101604052809291906000905b8282101561134f5783826002020160028060200260405190810160405280929190826002801561133b576020028201915b815481526020019060010190808311611327575b5050505050815260200190600101906112f6565b5050505090506001604051825151815260208351015160208201526020850260208e010151516040820152602080860260208f01015101517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703606082015260406020860260208901015160808360065afa821691506020830151518152602080840151015160208201528b51604082015260208c01517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703606082015260406020860260208801015160808360065afa8216915081151561143057600080fd5b505050508080600101915050611050565b5060008090506000866040516020018082600260200280838360005b8381101561147857808201518184015260208101905061145d565b5050505090500191505060405160208183030381529060405280519060200120905060008090505b6007805490508110156114e457816007828154811015156114bd57fe5b906000526020600020015414156114d757600192506114e4565b80806001019150506114a0565b508115151561155b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4e6f6e636520616c7265616479207365656e210000000000000000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631659e67d85858d8d8d6008548e8e6040518963ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018060200189600260200280838360005b838110156116055780820151818401526020810190506115ea565b505050509050018060200188815260200187600260200280838360005b8381101561163d578082015181840152602081019050611622565b505050509050018060200186810386528e8181518152602001915080516000925b818410156116a957828490602001906020020151600260200280838360005b8381101561169857808201518184015260208101905061167d565b50505050905001926001019261165e565b9250505086810385528d8181518152602001915080516000925b8184101561170e57828490602001906020020151600260200280838360005b838110156116fd5780820151818401526020810190506116e2565b5050505090500192600101926116c3565b9250505086810384528c8181518152602001915080516000925b8184101561177357828490602001906020020151600260200280838360005b83811015611762578082015181840152602081019050611747565b505050509050019260010192611728565b9250505086810383528a8181518152602001915080516000925b818410156117d857828490602001906020020151600260200280838360005b838110156117c75780820151818401526020810190506117ac565b50505050905001926001019261178d565b92505050868103825287818151815260200191508051906020019080838360005b838110156118145780820151818401526020810190506117f9565b50505050905090810190601f1680156118415780820380516001836020036101000a031916815260200191505b509d505050505050505050505050505060206040518083038186803b15801561186957600080fd5b505afa15801561187d573d6000803e3d6000fd5b505050506040513d602081101561189357600080fd5b810190808051906020019092919050505015156118fb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180612d536023913960400191505060405180910390fd5b60078190806001815401808255809150509060018203906000526020600020016000909192909190915055507f4ef6ed22b1551aeadeb80e67bb3a38788491e81527cc70a85bff611e9e51e18a8860405180806020018281038252838181518152602001915080516000925b818410156119b257828490602001906020020151600260200280838360005b838110156119a1578082015181840152602081019050611986565b505050509050019260010192611967565b925050509250505060405180910390a150505050505050505050565b6000846040516020018082600260200280838360005b838110156119ff5780820151818401526020810190506119e4565b50505050905001915050604051602081830303815290604052805190602001209050611a2a8161261f565b1515611a9e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4163636f756e74206e6f742079657420726567697374657265642e000000000081525060200191505060405180910390fd5b611aa781612838565b83600011158015611abc575063ffffffff8411155b1515611b30576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f5472616e7366657220616d6f756e74206f7574206f662072616e67652e00000081525060200191505060405180910390fd5b611b38612b0b565b60056000838152602001908152602001600020600280602002604051908101604052809291906000905b82821015611bbb57838260020201600280602002604051908101604052809291908260028015611ba7576020028201915b815481526020019060010190808311611b93575b505050505081526020019060010190611b62565b5050505090506001604051825151815260208351015160208201527f077da99d806abd13c9f15ece5398525119d11e11e9836b2ee7d23f6159ad87d460408201527f01485efa927f2ad41bff567eec88f32fb0a0f706588b4e41a8d587d008b7f8756060820152867f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001036080820152604080820160606040840160075afa821691506040835160808360065afa82169150811515611c7857600080fd5b50508060056000848152602001908152602001600020906002611c9c929190612b39565b5060046000838152602001908152602001600020600280602002604051908101604052809291906000905b82821015611d2057838260020201600280602002604051908101604052809291908260028015611d0c576020028201915b815481526020019060010190808311611cf8575b505050505081526020019060010190611cc7565b5050505090506001604051825151815260208351015160208201527f077da99d806abd13c9f15ece5398525119d11e11e9836b2ee7d23f6159ad87d460408201527f01485efa927f2ad41bff567eec88f32fb0a0f706588b4e41a8d587d008b7f8756060820152867f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001036080820152604080820160606040840160075afa821691506040835160808360065afa82169150811515611ddd57600080fd5b505060008090506000856040516020018082600260200280838360005b83811015611e15578082015181840152602081019050611dfa565b5050505090500191505060405160208183030381529060405280519060200120905060008090505b600780549050811015611e815781600782815481101515611e5a57fe5b90600052602060002001541415611e745760019250611e81565b8080600101915050611e3d565b5081151515611ef8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4e6f6e636520616c7265616479207365656e210000000000000000000000000081525060200191505060405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e1a999e846000600281101515611f4557fe5b6020020151856001600281101515611f5957fe5b60200201518b8b6008548c338d6040518963ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018089600260200280838360005b83811015611fbc578082015181840152602081019050611fa1565b5050505090500188600260200280838360005b83811015611fea578082015181840152602081019050611fcf565b5050505090500187600260200280838360005b83811015612018578082015181840152602081019050611ffd565b5050505090500186815260200185815260200184600260200280838360005b83811015612052578082015181840152602081019050612037565b505050509050018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156120c75780820151818401526020810190506120ac565b50505050905090810190601f1680156120f45780820380516001836020036101000a031916815260200191505b50995050505050505050505060206040518083038186803b15801561211857600080fd5b505afa15801561212c573d6000803e3d6000fd5b505050506040513d602081101561214257600080fd5b810190808051906020019092919050505015156121c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f4275726e2070726f6f6620766572696669636174696f6e206661696c6564210081525060200191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33896040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561228b57600080fd5b505af115801561229f573d6000803e3d6000fd5b505050506040513d60208110156122b557600080fd5b8101908080519060200190929190505050151561231d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526035815260200180612d766035913960400191505060405180910390fd5b60078190806001815401808255809150509060018203906000526020600020016000909192909190915055505050505050505050565b606060008484905090508060405190808252806020026020018201604052801561239757816020015b612384612c0d565b81526020019060019003908161237c5790505b50915060008090505b8181101561261657600086868381811015156123b857fe5b9050604002016040516020018082600260200280828437600081840152601f19601f82011690508083019250505091505060405160208183030381529060405280519060200120905060046000828152602001908152602001600020600280602002604051908101604052809291906000905b8282101561248457838260020201600280602002604051908101604052809291908260028015612470576020028201915b81548152602001906001019080831161245c575b50505050508152602001906001019061242b565b50505050848381518110151561249657fe5b906020019060200201819052508460066000838152602001908152602001600020541015612608576124c6612b0b565b60056000838152602001908152602001600020600280602002604051908101604052809291906000905b8282101561254957838260020201600280602002604051908101604052809291908260028015612535576020028201915b815481526020019060010190808311612521575b5050505050815260200190600101906124f0565b5050505090506001604051825151815260208351015160208201526020850260208801015151516040820152602080860260208901015151015160608201526040602086026020890101515160808360065afa82169150602083015151815260208084015101516020820152602080860260208901015101515160408201526020806020870260208a0101510151015160608201526040602080870260208a010151015160808360065afa8216915081151561260457600080fd5b5050505b5080806001019150506123a0565b50509392505050565b60008060010260046000848152602001908152602001600020600060028110151561264657fe5b60020201600060028110151561265857fe5b015414158061269f5750600060010260046000848152602001908152602001600020600060028110151561268857fe5b60020201600160028110151561269a57fe5b015414155b806126e2575060006001026004600084815260200190815260200160002060016002811015156126cb57fe5b6002020160006002811015156126dd57fe5b015414155b806127255750600060010260046000848152602001908152602001600020600160028110151561270e57fe5b60020201600160028110151561272057fe5b015414155b806127685750600060010260056000848152602001908152602001600020600060028110151561275157fe5b60020201600060028110151561276357fe5b015414155b806127ab5750600060010260056000848152602001908152602001600020600060028110151561279457fe5b6002020160016002811015156127a657fe5b015414155b806127ee575060006001026005600084815260200190815260200160002060016002811015156127d757fe5b6002020160006002811015156127e957fe5b015414155b806128315750600060010260056000848152602001908152602001600020600160028110151561281a57fe5b60020201600160028110151561282c57fe5b015414155b9050919050565b60006003544281151561284757fe5b0490508060066000848152602001908152602001600020541015612ae75761286d612c3b565b604080519081016040528060046000868152602001908152602001600020600280602002604051908101604052809291906000905b828210156128fb578382600202016002806020026040519081016040528092919082600280156128e7576020028201915b8154815260200190600101908083116128d3575b5050505050815260200190600101906128a2565b50505050815260200160056000868152602001908152602001600020600280602002604051908101604052809291906000905b8282101561298757838260020201600280602002604051908101604052809291908260028015612973576020028201915b81548152602001906001019080831161295f575b50505050508152602001906001019061292e565b50505050815250905060016040518251515181526020835151015160208201526020830151515160408201526020808401515101516060820152604083515160808360065afa82169150602083510151518152602080845101510151602082015260208084015101515160408201526020806020850151015101516060820152604060208451015160808360065afa82169150811515612a2657600080fd5b5050806000600281101515612a3757fe5b602002015160046000858152602001908152602001600020906002612a5d929190612b39565b50604080519081016040528060408051908101604052806000600102815260200160006001028152508152602001604080519081016040528060006001028152602001600060010281525081525060056000858152602001908152602001600020906002612acc929190612b39565b50816006600085815260200190815260200160002081905550505b806008541015612b07578060088190555060076000612b069190612c6a565b5b5050565b6080604051908101604052806002905b612b23612beb565b815260200190600190039081612b1b5790505090565b82600280028101928215612b78579160200282015b82811115612b7757825182906002612b67929190612c8b565b5091602001919060020190612b4e565b5b509050612b859190612ccb565b5090565b6040805190810160405280600290602082028038833980820191505090505090565b8260028101928215612bda579160200282015b82811115612bd9578251825591602001919060010190612bbe565b5b509050612be79190612cf7565b5090565b6040805190810160405280600290602082028038833980820191505090505090565b6080604051908101604052806002905b612c25612beb565b815260200190600190039081612c1d5790505090565b610100604051908101604052806002905b612c54612c0d565b815260200190600190039081612c4c5790505090565b5080546000825590600052602060002090810190612c889190612cf7565b50565b8260028101928215612cba579160200282015b82811115612cb9578251825591602001919060010190612c9e565b5b509050612cc79190612cf7565b5090565b612cf491905b80821115612cf05760008181612ce79190612d1c565b50600201612cd1565b5090565b90565b612d1991905b80821115612d15576000816000905550600101612cfd565b5090565b90565b50600081556001016000905556fe46756e642070757368657320636f6e74726163742070617374206d6178696d756d2076616c75652e5472616e736665722070726f6f6620766572696669636174696f6e206661696c656421546869732073686f756c646e2774206661696c2e2e2e20536f6d657468696e672077656e74207365766572656c792077726f6e672ea165627a7a72305820078599fc3ea89d68ba6335b2d234075f0b8a35574107f4a101829388602e8fb40029",
  "sourceMap": "111:15553:5:-;;;679:1;652:28;;1109:376;8:9:-1;5:2;;;30:1;27;20:12;5:2;1109:376:5;;;;;;;;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;1109:376:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1342:5;1325:4;;:23;;;;;;;;;;;;;;;;;;1390:7;1358:14;;:40;;;;;;;;;;;;;;;;;;1436:5;1408:12;;:34;;;;;;;;;;;;;;;;;;1466:12;1452:11;:26;;;;1109:376;;;;111:15553;;;;;;",
  "deployedSourceMap": "111:15553:5:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;111:15553:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5468:1917;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;5468:1917:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;7391:1384;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7391:1384:5;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;216:26;;;:::i;:::-;;;;;;;;;;;;;;;;;;;8781:3828;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;8781:3828:5;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;8781:3828:5;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;8781:3828:5;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;8781:3828:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;8781:3828:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;8781:3828:5;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;8781:3828:5;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;8781:3828:5;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;8781:3828:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;8781:3828:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;8781:3828:5;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;8781:3828:5;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;8781:3828:5;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;8781:3828:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;8781:3828:5;;;;;;;;;;;;;;;:::i;:::-;;12615:3047;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;12615:3047:5;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;12615:3047:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;12615:3047:5;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;12615:3047:5;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;12615:3047:5;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;12615:3047:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;12615:3047:5;;;;;;;;;;;;;;;:::i;:::-;;1491:2107;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1491:2107:5;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;1491:2107:5;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;1491:2107:5;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;1491:2107:5;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1491:2107:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5468:1917;5631:28;;:::i;:::-;5706:1;5735:4;5729:11;5763:66;5760:1;5753:77;5864:66;5857:4;5854:1;5850:12;5843:88;5965:1;5958:4;5955:1;5951:12;5944:23;6036:4;6033:1;6027:4;6024:1;6018:4;6013:3;6002:39;5994:6;5990:52;5980:62;;6100:4;6094;6087;6084:1;6080:12;6067:38;6211:1;6143:66;6139:74;6132:4;6129:1;6125:12;6118:96;6324:4;6317;6314:1;6310:12;6304:4;6297;6294:1;6290:12;6284:4;6279:3;6268:61;6260:6;6256:74;6246:84;;6424:4;6414:7;6408:14;6402:4;6399:1;6393:4;6388:3;6377:52;6369:6;6365:65;6355:75;;6472:6;6465:14;6462:2;;;6508:1;6505;6498:12;6462:2;5678:856;;6543:17;6600:4;6607:1;6610:7;6618:1;6610:10;;;;;;;;;;;;;6581:40;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;6581:40:5;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;6581:40:5;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;6581:40:5;;;6571:51;;;;;;6563:60;;;6543:80;;6684:66;6673:9;6669:82;6656:95;;6809:1;6796:9;:14;6788:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6856:13;6893:1;6882:13;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;6882:13:5;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;6882:13:5;;;6872:24;;;;;;6856:40;;6915:17;6926:5;6915:10;:17::i;:::-;6914:18;6906:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7032:4;7026;7016:7;7010:14;6997:40;7102:66;7094:4;7085:7;7081:18;7075:25;7068:101;7227:66;7220:4;7212;7203:7;7199:18;7193:25;7189:36;7182:112;7333:7;7313:10;:17;7324:5;7313:17;;;;;;;;;;;:27;;;;;;;:::i;:::-;;5468:1917;;;;;;:::o;7391:1384::-;7466:13;7503:1;7492:13;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;7492:13:5;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;7492:13:5;;;7482:24;;;;;;7466:40;;7524:17;7535:5;7524:10;:17::i;:::-;7516:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7583:15;7592:5;7583:8;:15::i;:::-;296:10;7617:9;:16;;7609:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7714:25;;:::i;:::-;7742:10;:17;7753:5;7742:17;;;;;;;;;;;7760:1;7742:20;;;;;;;;;;;;7714:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7809:1;7838:4;7832:11;7872:7;7866:14;7863:1;7856:25;7934:4;7925:7;7921:18;7915:25;7908:4;7905:1;7901:12;7894:47;7975:66;7968:4;7965:1;7961:12;7954:88;8076:66;8069:4;8066:1;8062:12;8055:88;8177:9;8170:4;8167:1;8163:12;8156:31;8352:4;8345;8342:1;8338:12;8332:4;8325;8322:1;8318:12;8312:4;8307:3;8296:61;8288:6;8284:74;8274:84;;8433:4;8424:7;8418:4;8415:1;8409:4;8404:3;8393:45;8385:6;8381:58;8371:68;;8462:6;8455:14;8452:2;;;8498:1;8495;8488:12;8452:2;7781:743;;8556:7;8533:10;:17;8544:5;8533:17;;;;;;;;;;;8551:1;8533:20;;;;;;;;;;;;:30;;;;;;;:::i;:::-;;8581:4;;;;;;;;;;;:17;;;8599:10;8619:4;8626:9;8581:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8581:55:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8581:55:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8581:55:5;;;;;;;;;;;;;;;;8573:96;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;296:10;8687:4;;;;;;;;;;;:14;;;8710:4;8687:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8687:29:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8687:29:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8687:29:5;;;;;;;;;;;;;;;;:36;;8679:89;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7391:1384;;;;:::o;216:26::-;;;;:::o;8781:3828::-;8924:12;8939:1;:8;8924:23;;8957;9000:4;8983:22;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;8957:48;;9015:23;9058:4;9041:22;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;9015:48;;9093:4;9081:1;:8;:16;9073:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9146:9;9158:1;9146:13;;9141:2966;9165:4;9161:1;:8;9141:2966;;;9190:13;9227:1;9229;9227:4;;;;;;;;;;;;;;;;;;9216:16;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;9216:16:5;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;9216:16:5;;;9206:27;;;;;;9190:43;;9255:17;9266:5;9255:10;:17::i;:::-;9247:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9318:15;9327:5;9318:8;:15::i;:::-;9347:28;;:::i;:::-;9378:10;:17;9389:5;9378:17;;;;;;;;;;;9347:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9450:1;9483:4;9477:11;9527:7;9521:14;9515:21;9512:1;9505:32;9601:4;9591:7;9585:14;9581:25;9575:32;9568:4;9565:1;9561:12;9554:54;9969:4;9966:1;9962:12;9955:4;9952:1;9948:12;9944:31;9938:38;9932:45;9925:4;9922:1;9918:12;9911:67;10138:4;10129;10126:1;10122:12;10115:4;10112:1;10108:12;10104:31;10098:38;10094:49;10088:56;10020:66;10016:129;10009:4;10006:1;10002:12;9995:151;10232:4;10222:7;10216:14;10210:4;10207:1;10201:4;10196:3;10185:52;10177:6;10173:65;10163:75;;10290:4;10281:7;10277:18;10271:25;10265:32;10262:1;10255:43;10373:4;10365;10356:7;10352:18;10346:25;10342:36;10336:43;10329:4;10326:1;10322:12;10315:65;10511:1;10505:8;10498:4;10495:1;10491:12;10484:30;10637:4;10634:1;10630:12;10624:19;10556:66;10552:92;10545:4;10542:1;10538:12;10531:114;10753:4;10745;10736:7;10732:18;10726:25;10720:4;10717:1;10711:4;10706:3;10695:63;10687:6;10683:76;10673:86;;10786:6;10779:14;10776:2;;;10826:1;10823;10816:12;10776:2;9418:1442;;10893:7;10873:10;:17;10884:5;10873:17;;;;;;;;;;;:27;;;;;;;:::i;:::-;;10965:3;:10;10969:5;10965:10;;;;;;;;;;;10955:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11030:1;11063:4;11057:11;11107:7;11101:14;11095:21;11092:1;11085:32;11181:4;11171:7;11165:14;11161:25;11155:32;11148:4;11145:1;11141:12;11134:54;11263:4;11260:1;11256:12;11249:4;11246:1;11242:12;11238:31;11232:38;11226:45;11219:4;11216:1;11212:12;11205:67;11432:4;11423;11420:1;11416:12;11409:4;11406:1;11402:12;11398:31;11392:38;11388:49;11382:56;11314:66;11310:129;11303:4;11300:1;11296:12;11289:151;11552:4;11543;11540:1;11536:12;11529:4;11524:3;11520:14;11516:33;11510:40;11504:4;11501:1;11495:4;11490:3;11479:78;11471:6;11467:91;11457:101;;11610:4;11601:7;11597:18;11591:25;11585:32;11582:1;11575:43;11693:4;11685;11676:7;11672:18;11666:25;11662:36;11656:43;11649:4;11646:1;11642:12;11635:65;11744:1;11738:8;11731:4;11728:1;11724:12;11717:30;11870:4;11867:1;11863:12;11857:19;11789:66;11785:92;11778:4;11775:1;11771:12;11764:114;11990:4;11981;11978:1;11974:12;11967:4;11962:3;11958:14;11954:33;11948:40;11942:4;11939:1;11933:4;11928:3;11917:78;11909:6;11905:91;11895:101;;12023:6;12016:14;12013:2;;;12063:1;12060;12053:12;12013:2;10998:1099;;;;9171:3;;;;;;;9141:2966;;;;12117:9;12129:5;12117:17;;12144:13;12181:1;12170:13;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;12170:13:5;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;12170:13:5;;;12160:24;;;;;;12144:40;;12199:9;12211:1;12199:13;;12194:163;12218:8;:15;;;;12214:1;:19;12194:163;;;12273:5;12258:8;12267:1;12258:11;;;;;;;;;;;;;;;;;;:20;12254:93;;;12305:4;12298:11;;12327:5;;12254:93;12235:3;;;;;;;12194:163;;;;12375:4;12374:5;12366:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12421:14;;;;;;;;;;;:29;;;12451:3;12456;12461:1;12464;12467;12470:16;;12488:1;12491:5;12421:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;12421:76:5;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;12421:76:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;12421:76:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;12421:76:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;12421:76:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;12421:76:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;12421:76:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12421:76:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;12421:76:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12421:76:5;;;;;;;;;;;;;;;;12413:124;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12548:8;12562:5;12548:20;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;12548:20:5;;;;;;;;;;;;;;;;;;;;;;12583:19;12600:1;12583:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;12583:19:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;8781:3828;;;;;;;;;;:::o;12615:3047::-;12727:13;12764:1;12753:13;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;12753:13:5;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;12753:13:5;;;12743:24;;;;;;12727:40;;12785:17;12796:5;12785:10;:17::i;:::-;12777:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12844:15;12853:5;12844:8;:15::i;:::-;12883:9;12878:1;:14;;:34;;;;;296:10;12896:9;:16;;12878:34;12870:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12956:28;;:::i;:::-;12987:10;:17;12998:5;12987:17;;;;;;;;;;;12956:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13110:1;13139:4;13133:11;13179:7;13173:14;13167:21;13164:1;13157:32;13249:4;13239:7;13233:14;13229:25;13223:32;13216:4;13213:1;13209:12;13202:54;13337:66;13330:4;13327:1;13323:12;13316:88;13445:66;13438:4;13435:1;13431:12;13424:88;13625:9;13557:66;13553:82;13546:4;13543:1;13539:12;13532:104;13727:4;13720;13717:1;13713:12;13707:4;13700;13697:1;13693:12;13687:4;13682:3;13671:61;13663:6;13659:74;13649:84;;13815:4;13805:7;13799:14;13793:4;13790:1;13784:4;13779:3;13768:52;13760:6;13756:65;13746:75;;13910:6;13903:14;13900:2;;;13946:1;13943;13936:12;13900:2;13082:890;;14001:7;13981:10;:17;13992:5;13981:17;;;;;;;;;;;:27;;;;;;;:::i;:::-;;14049:3;:10;14053:5;14049:10;;;;;;;;;;;14039:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14180:1;14209:4;14203:11;14249:7;14243:14;14237:21;14234:1;14227:32;14319:4;14309:7;14303:14;14299:25;14293:32;14286:4;14283:1;14279:12;14272:54;14360:66;14353:4;14350:1;14346:12;14339:88;14468:66;14461:4;14458:1;14454:12;14447:88;14648:9;14580:66;14576:82;14569:4;14566:1;14562:12;14555:104;14750:4;14743;14740:1;14736:12;14730:4;14723;14720:1;14716:12;14710:4;14705:3;14694:61;14686:6;14682:74;14672:84;;14838:4;14828:7;14822:14;14816:4;14813:1;14807:4;14802:3;14791:52;14783:6;14779:65;14769:75;;14933:6;14926:14;14923:2;;;14969:1;14966;14959:12;14923:2;14152:843;;15004:9;15016:5;15004:17;;15031:13;15068:1;15057:13;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;15057:13:5;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;15057:13:5;;;15047:24;;;;;;15031:40;;15086:9;15098:1;15086:13;;15081:231;15105:8;:15;;;;15101:1;:19;15081:231;;;15160:5;15145:8;15154:1;15145:11;;;;;;;;;;;;;;;;;;:20;15141:161;;;15260:4;15253:11;;15282:5;;15141:161;15122:3;;;;;;;15081:231;;;;15330:4;15329:5;15321:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15376:12;;;;;;;;;;;:23;;;15400:7;15408:1;15400:10;;;;;;;;;;;;;15412:7;15420:1;15412:10;;;;;;;;;;;;;15424:1;15427:9;15438:16;;15456:1;15459:10;15471:5;15376:101;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;15376:101:5;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;15376:101:5;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;15376:101:5;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;15376:101:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;15376:101:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;15376:101:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;15376:101:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;15376:101:5;;;;;;;;;;;;;;;;15368:145;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15531:4;;;;;;;;;;;:13;;;15545:10;15557:9;15531:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;15531:36:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;15531:36:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;15531:36:5;;;;;;;;;;;;;;;;15523:102;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15635:8;15649:5;15635:20;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;15635:20:5;;;;;;;;;;;;;;;;;;;;;;12615:3047;;;;;;;;:::o;1491:2107::-;1580:31;2015:12;2030:1;;:8;;2015:23;;2079:4;2059:25;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;2048:36;;2099:9;2111:1;2099:13;;2094:1498;2118:4;2114:1;:8;2094:1498;;;2143:13;2180:1;;2182;2180:4;;;;;;;;;;;;;;2169:16;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;2169:16:5;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2169:16:5;;;2159:27;;;;;;2143:43;;2214:3;:10;2218:5;2214:10;;;;;;;;;;;2200:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:8;2209:1;2200:11;;;;;;;;;;;;;;;;;:24;;;;2264:5;2242:12;:19;2255:5;2242:19;;;;;;;;;;;;:27;2238:1344;;;2289:28;;:::i;:::-;2320:10;:17;2331:5;2320:17;;;;;;;;;;;2289:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2400:1;2437:4;2431:11;2485:7;2479:14;2473:21;2470:1;2463:32;2563:4;2553:7;2547:14;2543:25;2537:32;2530:4;2527:1;2523:12;2516:54;2662:4;2659:1;2655:12;2648:4;2638:8;2634:19;2630:38;2624:45;2618:52;2612:59;2605:4;2602:1;2598:12;2591:81;2778:4;2768;2765:1;2761:12;2754:4;2744:8;2740:19;2736:38;2730:45;2724:52;2720:63;2714:70;2707:4;2704:1;2700:12;2693:92;2913:4;2903;2900:1;2896:12;2889:4;2879:8;2875:19;2871:38;2865:45;2859:52;2853:4;2850:1;2844:4;2839:3;2828:90;2820:6;2816:103;2806:113;;2975:4;2966:7;2962:18;2956:25;2950:32;2947:1;2940:43;3062:4;3054;3045:7;3041:18;3035:25;3031:36;3025:43;3018:4;3015:1;3011:12;3004:65;3174:4;3165;3162:1;3158:12;3151:4;3141:8;3137:19;3133:38;3127:45;3123:56;3117:63;3111:70;3104:4;3101:1;3097:12;3090:92;3299:4;3291;3282;3279:1;3275:12;3268:4;3258:8;3254:19;3250:38;3244:45;3240:56;3234:63;3230:74;3224:81;3217:4;3214:1;3210:12;3203:103;3445:4;3437;3428;3425:1;3421:12;3414:4;3404:8;3400:19;3396:38;3390:45;3386:56;3380:63;3374:4;3371:1;3365:4;3360:3;3349:101;3341:6;3337:114;3327:124;;3482:6;3475:14;3472:2;;;3526:1;3523;3516:12;3472:2;2364:1204;;;;2094:1498;2124:3;;;;;;;2094:1498;;;;1491:2107;;;;;;:::o;5155:307::-;5208:4;5251:1;5231:21;;:3;:10;5235:5;5231:10;;;;;;;;;;;5242:1;5231:13;;;;;;;;;;;;5245:1;5231:16;;;;;;;;;;;:21;;:46;;;;5276:1;5256:21;;:3;:10;5260:5;5256:10;;;;;;;;;;;5267:1;5256:13;;;;;;;;;;;;5270:1;5256:16;;;;;;;;;;;:21;;5231:46;:71;;;;5301:1;5281:21;;:3;:10;5285:5;5281:10;;;;;;;;;;;5292:1;5281:13;;;;;;;;;;;;5295:1;5281:16;;;;;;;;;;;:21;;5231:71;:96;;;;5326:1;5306:21;;:3;:10;5310:5;5306:10;;;;;;;;;;;5317:1;5306:13;;;;;;;;;;;;5320:1;5306:16;;;;;;;;;;;:21;;5231:96;:128;;;;5358:1;5331:28;;:10;:17;5342:5;5331:17;;;;;;;;;;;5349:1;5331:20;;;;;;;;;;;;5352:1;5331:23;;;;;;;;;;;:28;;5231:128;:160;;;;5390:1;5363:28;;:10;:17;5374:5;5363:17;;;;;;;;;;;5381:1;5363:20;;;;;;;;;;;;5384:1;5363:23;;;;;;;;;;;:28;;5231:160;:192;;;;5422:1;5395:28;;:10;:17;5406:5;5395:17;;;;;;;;;;;5413:1;5395:20;;;;;;;;;;;;5416:1;5395:23;;;;;;;;;;;:28;;5231:192;:224;;;;5454:1;5427:28;;:10;:17;5438:5;5427:17;;;;;;;;;;;5445:1;5427:20;;;;;;;;;;;;5448:1;5427:23;;;;;;;;;;;:28;;5231:224;5224:231;;5155:307;;;:::o;3604:1545::-;3656:9;3686:11;;3668:15;:29;;;;;;;;3656:41;;3733:1;3711:12;:19;3724:5;3711:19;;;;;;;;;;;;:23;3707:1327;;;3750:31;;:::i;:::-;:65;;;;;;;;;3785:3;:10;3789:5;3785:10;;;;;;;;;;;3750:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3797:10;:17;3808:5;3797:17;;;;;;;;;;;3750:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3870:1;3903:4;3897:11;3953:7;3947:14;3941:21;3935:28;3932:1;3925:39;4035:4;4024:7;4018:14;4012:21;4008:32;4002:39;3995:4;3992:1;3988:12;3981:61;4111:4;4102:7;4098:18;4092:25;4086:32;4080:39;4073:4;4070:1;4066:12;4059:61;4202:4;4193;4184:7;4180:18;4174:25;4168:32;4164:43;4158:50;4151:4;4148:1;4144:12;4137:72;4302:4;4291:7;4285:14;4279:21;4273:4;4270:1;4264:4;4259:3;4248:59;4240:6;4236:72;4226:82;;4367:4;4357:7;4351:14;4347:25;4341:32;4335:39;4332:1;4325:50;4457:4;4449;4439:7;4433:14;4429:25;4423:32;4419:43;4413:50;4406:4;4403:1;4399:12;4392:72;4545:4;4537;4528:7;4524:18;4518:25;4514:36;4508:43;4502:50;4495:4;4492:1;4488:12;4481:72;4646:4;4638;4630;4621:7;4617:18;4611:25;4607:36;4601:43;4597:54;4591:61;4584:4;4581:1;4577:12;4570:83;4757:4;4749;4739:7;4733:14;4729:25;4723:32;4717:4;4714:1;4708:4;4703:3;4692:70;4684:6;4680:83;4670:93;;4790:6;4783:14;4780:2;;;4830:1;4827;4820:12;4780:2;3838:1026;;4890:7;4898:1;4890:10;;;;;;;;;;;;;4877:3;:10;4881:5;4877:10;;;;;;;;;;;:23;;;;;;;:::i;:::-;;4914:72;;;;;;;;;;;;;;;;;;4944:1;4936:10;;4914:72;;;;4956:1;4948:10;;4914:72;;;;;;;;;;;;;;;;4970:1;4962:10;;4914:72;;;;4982:1;4974:10;;4914:72;;;;;;:10;:17;4925:5;4914:17;;;;;;;;;;;:72;;;;;;;:::i;:::-;;5022:1;5000:12;:19;5013:5;5000:19;;;;;;;;;;;:23;;;;3707:1327;;5066:1;5047:16;;:20;5043:100;;;5102:1;5083:16;:20;;;;5124:8;;5117:15;;;;:::i;:::-;5043:100;3604:1545;;:::o;111:15553::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;111:15553:5;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;111:15553:5;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o",
  "source": "pragma solidity 0.5.4;\n\nimport './ZetherVerifier.sol';\nimport './BurnVerifier.sol';\nimport './CashToken.sol';\n\ncontract ZSC {\n    CashToken coin;\n    ZetherVerifier zetherverifier;\n    BurnVerifier burnverifier;\n    uint256 public epochLength; // now in milliseconds.\n\n    uint256 constant MAX = 4294967295; // 2^32 - 1 // no sload for constants...!\n    mapping(bytes32 => bytes32[2][2]) acc; // main account mapping\n    mapping(bytes32 => bytes32[2][2]) pTransfers; // storage for pending transfers\n    mapping(bytes32 => uint256) lastRollOver;\n    bytes32[] nonceSet; // would be more natural to use a mapping, but they can't be deleted / reset!\n    uint256 lastGlobalUpdate = 0; // will be also used as a proxy for \"current epoch\", seeing as rollovers will be anticipated\n    // not implementing account locking for now...revisit\n\n    event TransferOccurred(bytes32[2][] parties); // all parties will be notified, client can determine whether it was real or not.\n    // arg is still necessary for transfers---not even so much to know when you received a transfer, as to know when you got rolled over.\n\n    constructor(address _coin, address _zether, address _burn, uint256 _epochLength) public {\n        // epoch length, like block.time, is in _seconds_. 4 is the minimum!!! (To allow a withdrawal to go through.)\n        coin = CashToken(_coin);\n        zetherverifier = ZetherVerifier(_zether);\n        burnverifier = BurnVerifier(_burn);\n        epochLength = _epochLength;\n    }\n\n    function simulateAccounts(bytes32[2][] calldata y, uint256 epoch) view external returns (bytes32[2][2][] memory accounts) {\n        // all of this could be assembled locally by querying `acc` and `pTransfers` (and `lastRollOver`) and assembling things by hand\n        // turns out this is extremely _slow_ though, because of the ~ 4 * N queries which must be made. turns out it's much faster\n        // to simply move the entire process into a contract method, and in fact this allows us to make the above 3 private\n        uint256 size = y.length;\n        accounts = new bytes32[2][2][](size);\n        for (uint256 i = 0; i < size; i++) {\n            bytes32 yHash = keccak256(abi.encode(y[i]));\n            accounts[i] = acc[yHash];\n            if (lastRollOver[yHash] < epoch) {\n                bytes32[2][2] memory scratch = pTransfers[yHash];\n                assembly {\n                    let result := 1\n                    let m := mload(0x40)\n                    mstore(m, mload(mload(scratch)))\n                    mstore(add(m, 0x20), mload(add(mload(scratch), 0x20)))\n                    mstore(add(m, 0x40), mload(mload(mload(add(add(accounts, 0x20), mul(i, 0x20))))))\n                    mstore(add(m, 0x60), mload(add(mload(mload(add(add(accounts, 0x20), mul(i, 0x20)))), 0x20)))\n                    result := and(result, staticcall(gas, 0x06, m, 0x80, mload(mload(add(add(accounts, 0x20), mul(i, 0x20)))), 0x40))\n                    mstore(m, mload(mload(add(scratch, 0x20))))\n                    mstore(add(m, 0x20), mload(add(mload(add(scratch, 0x20)), 0x20)))\n                    mstore(add(m, 0x40), mload(mload(add(mload(add(add(accounts, 0x20), mul(i, 0x20))), 0x20))))\n                    mstore(add(m, 0x60), mload(add(mload(add(mload(add(add(accounts, 0x20), mul(i, 0x20))), 0x20)), 0x20)))\n                    result := and(result, staticcall(gas, 0x06, m, 0x80, mload(add(mload(add(add(accounts, 0x20), mul(i, 0x20))), 0x20)), 0x40))\n                    if iszero(result) {\n                        revert(0, 0)\n                    }\n                }\n            }\n        }\n    }\n\n    function rollOver(bytes32 yHash) internal {\n        uint256 e = block.timestamp / epochLength;\n        if (lastRollOver[yHash] < e) {\n            bytes32[2][2][2] memory scratch = [acc[yHash], pTransfers[yHash]];\n            assembly {\n                let result := 1\n                let m := mload(0x40)\n                mstore(m, mload(mload(mload(scratch))))\n                mstore(add(m, 0x20), mload(add(mload(mload(scratch)), 0x20)))\n                mstore(add(m, 0x40), mload(mload(mload(add(scratch, 0x20)))))\n                mstore(add(m, 0x60), mload(add(mload(mload(add(scratch, 0x20))), 0x20)))\n                result := and(result, staticcall(gas, 0x06, m, 0x80, mload(mload(scratch)), 0x40))\n                mstore(m, mload(mload(add(mload(scratch), 0x20))))\n                mstore(add(m, 0x20), mload(add(mload(add(mload(scratch), 0x20)), 0x20)))\n                mstore(add(m, 0x40), mload(mload(add(mload(add(scratch, 0x20)), 0x20))))\n                mstore(add(m, 0x60), mload(add(mload(add(mload(add(scratch, 0x20)), 0x20)), 0x20)))\n                result := and(result, staticcall(gas, 0x06, m, 0x80, mload(add(mload(scratch), 0x20)), 0x40))\n                if iszero(result) {\n                    revert(0, 0)\n                }\n            }\n            acc[yHash] = scratch[0];\n            pTransfers[yHash] = [[bytes32(0), bytes32(0)], [bytes32(0), bytes32(0)]];\n            lastRollOver[yHash] = e;\n        }\n        if (lastGlobalUpdate < e) {\n            lastGlobalUpdate = e;\n            delete nonceSet;\n        }\n    }\n\n    function registered(bytes32 yHash) internal returns (bool) {\n        return acc[yHash][0][0] != 0 || acc[yHash][0][1] != 0 || acc[yHash][1][0] != 0 || acc[yHash][1][1] != 0 || pTransfers[yHash][0][0] != 0 || pTransfers[yHash][0][1] != 0 || pTransfers[yHash][1][0] != 0 || pTransfers[yHash][1][1] != 0;\n    }\n\n    function register(bytes32[2] calldata y, uint256 c, uint256 s) external {\n        // allows y to participate. c, s should be a Schnorr signature on \"this\"\n        bytes32[2][2] memory scratch;\n        assembly {\n            let result := 1\n            let m := mload(0x40)\n            mstore(m, 0x077da99d806abd13c9f15ece5398525119d11e11e9836b2ee7d23f6159ad87d4)\n            mstore(add(m, 0x20), 0x01485efa927f2ad41bff567eec88f32fb0a0f706588b4e41a8d587d008b7f875)\n            mstore(add(m, 0x40), s)\n            result := and(result, staticcall(gas, 0x07, m, 0x60, m, 0x40)) // m := g^s\n            calldatacopy(add(m, 0x40), 0x04, 0x40)\n            mstore(add(m, 0x80), sub(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001, c)) // negate c in F_q\n            result := and(result, staticcall(gas, 0x07, add(m, 0x40), 0x60, add(m, 0x40), 0x40)) // m := g^s\n            result := and(result, staticcall(gas, 0x06, m, 0x80, mload(scratch), 0x40)) // K := g^s * y^-c\n            if iszero(result) {\n                revert(0, 0)\n            }\n        }\n        uint256 challenge = uint256(keccak256(abi.encode(address(this), y, scratch[0])));\n        assembly {\n            challenge := mod(challenge, 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001) // better way...?\n        }\n        require(challenge == c, \"Invalid registration signature!\");\n        bytes32 yHash = keccak256(abi.encode(y));\n        require(!registered(yHash), \"Account already registered!\");\n        assembly {\n            calldatacopy(mload(scratch), 0x04, 0x40) // scratch[0] = y\n            mstore(mload(add(scratch, 0x20)), 0x077da99d806abd13c9f15ece5398525119d11e11e9836b2ee7d23f6159ad87d4)\n            mstore(add(mload(add(scratch, 0x20)), 0x20), 0x01485efa927f2ad41bff567eec88f32fb0a0f706588b4e41a8d587d008b7f875)\n        }\n        pTransfers[yHash] = scratch; // register y. pTransfers[y] = [y, g]\n    }\n\n    function fund(bytes32[2] calldata y, uint256 bTransfer) external {\n        bytes32 yHash = keccak256(abi.encode(y));\n        require(registered(yHash), \"Account not yet registered.\");\n        rollOver(yHash);\n\n        require(bTransfer <= MAX, \"Deposit amount out of range.\"); // uint, so other way not necessary?\n\n        bytes32[2] memory scratch = pTransfers[yHash][0];\n        assembly {\n            let result := 1\n            let m := mload(0x40)\n            mstore(m, mload(scratch))\n            mstore(add(m, 0x20), mload(add(scratch, 0x20)))\n            mstore(add(m, 0x40), 0x077da99d806abd13c9f15ece5398525119d11e11e9836b2ee7d23f6159ad87d4)\n            mstore(add(m, 0x60), 0x01485efa927f2ad41bff567eec88f32fb0a0f706588b4e41a8d587d008b7f875)\n            mstore(add(m, 0x80), bTransfer) // b will hopefully be a primitive / literal and not a pointer / address?\n            result := and(result, staticcall(gas, 0x07, add(m, 0x40), 0x60, add(m, 0x40), 0x40))\n            result := and(result, staticcall(gas, 0x06, m, 0x80, scratch, 0x40))\n            if iszero(result) {\n                revert(0, 0)\n            }\n        }\n        pTransfers[yHash][0] = scratch;\n        require(coin.transferFrom(msg.sender, address(this), bTransfer), \"Transfer from sender failed.\");\n        require(coin.balanceOf(address(this)) <= MAX, \"Fund pushes contract past maximum value.\");\n    }\n\n    function transfer(bytes32[2][] memory C, bytes32[2] memory D, bytes32[2][] memory y, bytes32[2] memory u, bytes memory proof) public {\n        uint256 size = y.length;\n        bytes32[2][] memory CLn = new bytes32[2][](size);\n        bytes32[2][] memory CRn = new bytes32[2][](size);\n        require(C.length == size, \"Input array length mismatch!\");\n\n        for (uint256 i = 0; i < size; i++) {\n            bytes32 yHash = keccak256(abi.encode(y[i]));\n            require(registered(yHash), \"Account not yet registered.\");\n            rollOver(yHash);\n            bytes32[2][2] memory scratch = pTransfers[yHash];\n            assembly {\n                let result := 1\n                let m := mload(0x40)\n                mstore(m, mload(mload(scratch)))\n                mstore(add(m, 0x20), mload(add(mload(scratch), 0x20)))\n                // calldatacopy(add(m, 0x40), add(0x104, mul(i, 0x40)), 0x40) // copy C[i] onto running block\n                // having to change external --> public to avoid stacktoodeep\n                // as a result, have to use the below two lines instead of the above single line.\n                mstore(add(m, 0x40), mload(mload(add(add(C, 0x20), mul(i, 0x20)))))\n                mstore(add(m, 0x60), sub(0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47, mload(add(mload(add(add(C, 0x20), mul(i, 0x20))), 0x20))))\n                result := and(result, staticcall(gas, 0x06, m, 0x80, mload(scratch), 0x40))\n                mstore(m, mload(mload(add(scratch, 0x20))))\n                mstore(add(m, 0x20), mload(add(mload(add(scratch, 0x20)), 0x20)))\n                // calldatacopy(add(m, 0x40), 0x24, 0x40) // copy R onto running block\n                mstore(add(m, 0x40), mload(D))\n                mstore(add(m, 0x60), sub(0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47, mload(add(D, 0x20)))) // invert!\n                result := and(result, staticcall(gas, 0x06, m, 0x80, mload(add(scratch, 0x20)), 0x40))\n                if iszero(result) {\n                    revert(0, 0)\n                }\n            }\n            pTransfers[yHash] = scratch; // credit / debit / neither y's account.\n            scratch = acc[yHash];\n            assembly {\n                let result := 1\n                let m := mload(0x40)\n                mstore(m, mload(mload(scratch)))\n                mstore(add(m, 0x20), mload(add(mload(scratch), 0x20)))\n                mstore(add(m, 0x40), mload(mload(add(add(C, 0x20), mul(i, 0x20)))))\n                mstore(add(m, 0x60), sub(0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47, mload(add(mload(add(add(C, 0x20), mul(i, 0x20))), 0x20))))\n                result := and(result, staticcall(gas, 0x06, m, 0x80, mload(add(add(CLn, 0x20), mul(i, 0x20))), 0x40))\n                mstore(m, mload(mload(add(scratch, 0x20))))\n                mstore(add(m, 0x20), mload(add(mload(add(scratch, 0x20)), 0x20)))\n                mstore(add(m, 0x40), mload(D))\n                mstore(add(m, 0x60), sub(0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47, mload(add(D, 0x20))))\n                result := and(result, staticcall(gas, 0x06, m, 0x80, mload(add(add(CRn, 0x20), mul(i, 0x20))), 0x40))\n                if iszero(result) {\n                    revert(0, 0)\n                }\n            }\n        }\n\n        bool seen = false;\n        bytes32 uHash = keccak256(abi.encode(u));\n        for (uint256 i = 0; i < nonceSet.length; i++) {\n            if (nonceSet[i] == uHash) {\n                seen = true;\n                break;\n            }\n        }\n        require(!seen, \"Nonce already seen!\");\n        require(zetherverifier.verifyTransfer(CLn, CRn, C, D, y, lastGlobalUpdate, u, proof), \"Transfer proof verification failed!\");\n\n        nonceSet.push(uHash);\n        emit TransferOccurred(y);\n    }\n\n    function burn(bytes32[2] memory y, uint256 bTransfer, bytes32[2] memory u, bytes memory proof) public {\n        bytes32 yHash = keccak256(abi.encode(y));\n        require(registered(yHash), \"Account not yet registered.\");\n        rollOver(yHash);\n\n        require(0 <= bTransfer && bTransfer <= MAX, \"Transfer amount out of range.\");\n        bytes32[2][2] memory scratch = pTransfers[yHash]; // could technically use sload, but... let's not go there.\n        assembly {\n            let result := 1\n            let m := mload(0x40)\n            mstore(m, mload(mload(scratch)))\n            mstore(add(m, 0x20), mload(add(mload(scratch), 0x20)))\n            // load bulletproof generator here\n            mstore(add(m, 0x40), 0x077da99d806abd13c9f15ece5398525119d11e11e9836b2ee7d23f6159ad87d4) // g_x\n            mstore(add(m, 0x60), 0x01485efa927f2ad41bff567eec88f32fb0a0f706588b4e41a8d587d008b7f875) // g_y\n            mstore(add(m, 0x80), sub(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001, bTransfer))\n            result := and(result, staticcall(gas, 0x07, add(m, 0x40), 0x60, add(m, 0x40), 0x40))\n            result := and(result, staticcall(gas, 0x06, m, 0x80, mload(scratch), 0x40)) // scratch[0] = acc[yHash][0] * g ^ -b, scratch[1] doesn't change\n            if iszero(result) {\n                revert(0, 0)\n            }\n        }\n        pTransfers[yHash] = scratch; // debit y's balance\n        scratch = acc[yHash]; // simulate debit of acc---just for use in verification, won't be applied\n        assembly {\n            let result := 1\n            let m := mload(0x40)\n            mstore(m, mload(mload(scratch)))\n            mstore(add(m, 0x20), mload(add(mload(scratch), 0x20)))\n            mstore(add(m, 0x40), 0x077da99d806abd13c9f15ece5398525119d11e11e9836b2ee7d23f6159ad87d4) // g_x\n            mstore(add(m, 0x60), 0x01485efa927f2ad41bff567eec88f32fb0a0f706588b4e41a8d587d008b7f875) // g_y\n            mstore(add(m, 0x80), sub(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001, bTransfer))\n            result := and(result, staticcall(gas, 0x07, add(m, 0x40), 0x60, add(m, 0x40), 0x40))\n            result := and(result, staticcall(gas, 0x06, m, 0x80, mload(scratch), 0x40)) // scratch[0] = acc[yHash][0] * g ^ -b, scratch[1] doesn't change\n            if iszero(result) {\n                revert(0, 0)\n            }\n        }\n        bool seen = false;\n        bytes32 uHash = keccak256(abi.encode(u));\n        for (uint256 i = 0; i < nonceSet.length; i++) {\n            if (nonceSet[i] == uHash) { // does this have to repeat the sload for each iteration?!? revisit\n                seen = true;\n                break;\n            }\n        }\n        require(!seen, \"Nonce already seen!\");\n        require(burnverifier.verifyBurn(scratch[0], scratch[1], y, bTransfer, lastGlobalUpdate, u, msg.sender, proof), \"Burn proof verification failed!\");\n        require(coin.transfer(msg.sender, bTransfer), \"This shouldn't fail... Something went severely wrong.\");\n        nonceSet.push(uHash);\n    }\n}\n",
  "sourcePath": "/Users/benediamond/anonymous-zether/packages/protocol/contracts/ZSC.sol",
  "compiler": {
    "name": "solc",
    "version": "0.5.4+commit.9549d8ff.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.19",
  "updatedAt": "2020-01-11T00:58:17.539Z",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  }
}