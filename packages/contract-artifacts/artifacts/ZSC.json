{
  "contractName": "ZSC",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "epochLength",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_coin",
          "type": "address"
        },
        {
          "name": "_zether",
          "type": "address"
        },
        {
          "name": "_burn",
          "type": "address"
        },
        {
          "name": "_epochLength",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "parties",
          "type": "bytes32[2][]"
        }
      ],
      "name": "TransferOccurred",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "y",
          "type": "bytes32[2][]"
        },
        {
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "simulateAccounts",
      "outputs": [
        {
          "name": "accounts",
          "type": "bytes32[2][2][]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "y",
          "type": "bytes32[2]"
        },
        {
          "name": "bTransfer",
          "type": "uint256"
        }
      ],
      "name": "fund",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "C",
          "type": "bytes32[2][]"
        },
        {
          "name": "D",
          "type": "bytes32[2]"
        },
        {
          "name": "y",
          "type": "bytes32[2][]"
        },
        {
          "name": "u",
          "type": "bytes32[2]"
        },
        {
          "name": "proof",
          "type": "bytes"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "y",
          "type": "bytes32[2]"
        },
        {
          "name": "bTransfer",
          "type": "uint256"
        },
        {
          "name": "u",
          "type": "bytes32[2]"
        },
        {
          "name": "proof",
          "type": "bytes"
        },
        {
          "name": "proof",
          "type": "bytes"
        }
      ],
      "name": "burn",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "y",
          "type": "bytes32[2]"
        },
        {
          "name": "bTransfer",
          "type": "uint256"
        },
        {
          "name": "u",
          "type": "bytes32[2]"
        },
        {
          "name": "proof",
          "type": "bytes"
        }
      ],
      "name": "burn",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.4+commit.9549d8ff\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"y\",\"type\":\"bytes32[2]\"},{\"name\":\"bTransfer\",\"type\":\"uint256\"}],\"name\":\"fund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"epochLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"C\",\"type\":\"bytes32[2][]\"},{\"name\":\"D\",\"type\":\"bytes32[2]\"},{\"name\":\"y\",\"type\":\"bytes32[2][]\"},{\"name\":\"u\",\"type\":\"bytes32[2]\"},{\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"y\",\"type\":\"bytes32[2]\"},{\"name\":\"bTransfer\",\"type\":\"uint256\"},{\"name\":\"u\",\"type\":\"bytes32[2]\"},{\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"y\",\"type\":\"bytes32[2][]\"},{\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"simulateAccounts\",\"outputs\":[{\"name\":\"accounts\",\"type\":\"bytes32[2][2][]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_coin\",\"type\":\"address\"},{\"name\":\"_zether\",\"type\":\"address\"},{\"name\":\"_burn\",\"type\":\"address\"},{\"name\":\"_epochLength\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"parties\",\"type\":\"bytes32[2][]\"}],\"name\":\"TransferOccurred\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/benediamond/anonymous-zether/packages/protocol/contracts/ZSC.sol\":\"ZSC\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/benediamond/anonymous-zether/packages/protocol/contracts/BurnVerifier.sol\":{\"keccak256\":\"0xa96ec34a905cdc3d21b60f7a1aced70de23d6ff83671a804b1958f21d0c6854b\",\"urls\":[\"bzzr://2b804476f3448987bc09374bc22ec64518bed3d953eb7af31e9a25caf79f9305\"]},\"/Users/benediamond/anonymous-zether/packages/protocol/contracts/CashToken.sol\":{\"keccak256\":\"0x82bb618b45f209947dab386268264b59af92d89e32057fcddb43d77444bf5ebd\",\"urls\":[\"bzzr://0e7157c5c1bb4b64fbf43071131558130666196f6e7643e4ca7a5461436f9a29\"]},\"/Users/benediamond/anonymous-zether/packages/protocol/contracts/Utils.sol\":{\"keccak256\":\"0x0a8fcd9f60c29d4e0114dd2f632688845d0e505943b3bc514698fd91da377ee6\",\"urls\":[\"bzzr://84371071fa5f1d7eba148701bb8d49c9e2de726fd0feb8669bf4754da418e44b\"]},\"/Users/benediamond/anonymous-zether/packages/protocol/contracts/ZSC.sol\":{\"keccak256\":\"0x6d3ce4c656b596569ef856816046c3013dd07f53e55d4c8e4fb31b8821d5df09\",\"urls\":[\"bzzr://341ec4f8ba989699b9623eb30b9bba502ce88d23cebe4a1f91e985d37c5db0d7\"]},\"/Users/benediamond/anonymous-zether/packages/protocol/contracts/ZetherVerifier.sol\":{\"keccak256\":\"0xe05f1efab2c451daed60eacc06d118cbbd4348ccf402a3b95afeff1df868b500\",\"urls\":[\"bzzr://b3d7f409b42c14f202c9d0688150fbb3e5ce552c1bf6a73edb195157716c4324\"]},\"openzeppelin-solidity/contracts/access/Roles.sol\":{\"keccak256\":\"0xb002c378d7b82a101bd659c341518953ca0919d342c0a400196982c0e7e7bcdb\",\"urls\":[\"bzzr://bd34c1ce05b5b2b3a62fc02e160f6805b1cadd476854664f433c685b2fda8dad\"]},\"openzeppelin-solidity/contracts/access/roles/MinterRole.sol\":{\"keccak256\":\"0x63da54a7a5d4e4d82ac8d1f4f7f995fd8ef2b5fe1f2960b83e534fa37fb60910\",\"urls\":[\"bzzr://cea53b805426e40efadb24f2613aca39182462e9ecd23fde7aacf0c4b5885aaf\"]},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x4ccf2d7b51873db1ccfd54ca2adae5eac3b184f9699911ed4490438419f1c690\",\"urls\":[\"bzzr://1604f5b6d6e916c154efd8c6720cda069e5ba32dfa0a9dedf2b42e5b02d07f89\"]},\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x852793a3c2f86d336a683b30d688ec3dcfc57451af5a2bf5975cda3b7191a901\",\"urls\":[\"bzzr://07fb42206812a17c1f71e548cfa5cec6f9aa1ae0ca5df870718ca4aa9759d1a5\"]},\"openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\":{\"keccak256\":\"0x6df8d686813b2875e99928ecd07bf8ee6d7473bc6a95eb1190e8fdba86beda76\",\"urls\":[\"bzzr://b4a3a1136392be8723a0d9627d1626323e3891c98e88ca5ab48da1dada375580\"]},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x90e8c2521653bbb1768b05889c5760031e688d9cd361f167489b89215e201b95\",\"urls\":[\"bzzr://aa8b45b57edafc3d67bc5d916327ea16807fae33f753ca163ae0c4061b789766\"]}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "sourceMap": "111:13391:4:-;;;290:1;273:18;;798:1;771:28;;1228:376;8:9:-1;5:2;;;30:1;27;20:12;5:2;1228:376:4;;;;;;;;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;1228:376:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1461:5;1444:4;;:23;;;;;;;;;;;;;;;;;;1509:7;1477:14;;:40;;;;;;;;;;;;;;;;;;1555:5;1527:12;;:34;;;;;;;;;;;;;;;;;;1585:12;1571:11;:26;;;;1228:376;;;;111:13391;;;;;;",
  "deployedSourceMap": "111:13391:4:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;111:13391:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5280:1627;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5280:1627:4;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;216:26;;;:::i;:::-;;;;;;;;;;;;;;;;;;;6913:3442;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;6913:3442:4;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;6913:3442:4;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;6913:3442:4;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;6913:3442:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;6913:3442:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;6913:3442:4;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;6913:3442:4;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;6913:3442:4;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;6913:3442:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;6913:3442:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;6913:3442:4;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;6913:3442:4;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;6913:3442:4;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;6913:3442:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;6913:3442:4;;;;;;;;;;;;;;;:::i;:::-;;10361:3139;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;10361:3139:4;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;10361:3139:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;10361:3139:4;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;10361:3139:4;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;10361:3139:4;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;10361:3139:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;10361:3139:4;;;;;;;;;;;;;;;:::i;:::-;;1610:2113;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1610:2113:4;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;1610:2113:4;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;1610:2113:4;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;1610:2113:4;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1610:2113:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5280:1627;5355:13;5398:1;5381:19;;;;;;;;;30:3:-1;22:6;14;1:33;57:3;49:6;45:16;35:26;;5381:19:4;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;5381:19:4;;;5371:30;;;;;;5355:46;;5411:15;5420:5;5411:8;:15::i;:::-;415:10;5573:9;:16;;5565:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;415:10;5689:6;;5677:9;:18;:25;;5669:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5851:25;;:::i;:::-;5879:10;:17;5890:5;5879:17;;;;;;;;;;;5897:1;5879:20;;;;;;;;;;;;5851:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6012:4;6006:11;6044:1;6074:7;6068:14;6065:1;6058:25;6136:4;6127:7;6123:18;6117:25;6110:4;6107:1;6103:12;6096:47;6177:66;6170:4;6167:1;6163:12;6156:88;6278:66;6271:4;6268:1;6264:12;6257:88;6379:9;6372:4;6369:1;6365:12;6358:31;6554:4;6547;6544:1;6540:12;6534:4;6527;6524:1;6520:12;6514:4;6509:3;6498:61;6490:6;6486:74;6476:84;;6635:4;6626:7;6620:4;6617:1;6611:4;6606:3;6595:45;6587:6;6583:58;6573:68;;6664:6;6657:14;6654:2;;;6700:1;6697;6690:12;6654:2;5983:743;;6758:7;6735:10;:17;6746:5;6735:17;;;;;;;;;;;6753:1;6735:20;;;;;;;;;;;;:30;;;;;;;:::i;:::-;;6783:4;;;;;;;;;;;:17;;;6801:10;6821:4;6828:9;6783:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6783:55:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6783:55:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6783:55:4;;;;;;;;;;;;;;;;6775:96;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6891:9;6881:6;;:19;;;;;;;;;;;5280:1627;;;;:::o;216:26::-;;;;:::o;6913:3442::-;7056:12;7071:1;:8;7056:23;;7089;7132:4;7115:22;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;7089:48;;7147:23;7190:4;7173:22;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;7147:48;;7225:4;7213:1;:8;:16;7205:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7272:14;7289:1;7272:18;;7305:9;7317:1;7305:13;;7300:2364;7324:1;:8;7320:1;:12;7300:2364;;;7353:13;7396:1;7398;7396:4;;;;;;;;;;;;;;;;;;7379:22;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;7379:22:4;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;7379:22:4;;;7369:33;;;;;;7353:49;;7416:15;7425:5;7416:8;:15::i;:::-;7445:28;;:::i;:::-;7476:10;:17;7487:5;7476:17;;;;;;;;;;;7445:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7549:4;7543:11;7593:7;7587:14;7581:21;7578:1;7571:32;7667:4;7657:7;7651:14;7647:25;7641:32;7634:4;7631:1;7627:12;7620:54;8035:4;8032:1;8028:12;8021:4;8018:1;8014:12;8010:31;8004:38;7998:45;7991:4;7988:1;7984:12;7977:67;8132:4;8123;8120:1;8116:12;8109:4;8106:1;8102:12;8098:31;8092:38;8088:49;8082:56;8075:4;8072:1;8068:12;8061:78;8225:4;8215:7;8209:14;8203:4;8200:1;8194:4;8189:3;8178:52;8170:6;8166:65;8156:75;;8283:4;8274:7;8270:18;8264:25;8258:32;8255:1;8248:43;8366:4;8358;8349:7;8345:18;8339:25;8335:36;8329:43;8322:4;8319:1;8315:12;8308:65;8504:1;8498:8;8491:4;8488:1;8484:12;8477:30;8558:4;8555:1;8551:12;8545:19;8538:4;8535:1;8531:12;8524:41;8662:4;8654;8645:7;8641:18;8635:25;8629:4;8626:1;8620:4;8615:3;8604:63;8596:6;8592:76;8582:86;;7516:1166;8715:7;8695:10;:17;8706:5;8695:17;;;;;;;;;;;:27;;;;;;;:::i;:::-;;8787:3;:10;8791:5;8787:10;;;;;;;;;;;8777:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8853:4;8847:11;8897:7;8891:14;8885:21;8882:1;8875:32;8971:4;8961:7;8955:14;8951:25;8945:32;8938:4;8935:1;8931:12;8924:54;9053:4;9050:1;9046:12;9039:4;9036:1;9032:12;9028:31;9022:38;9016:45;9009:4;9006:1;9002:12;8995:67;9150:4;9141;9138:1;9134:12;9127:4;9124:1;9120:12;9116:31;9110:38;9106:49;9100:56;9093:4;9090:1;9086:12;9079:78;9269:4;9260;9257:1;9253:12;9246:4;9241:3;9237:14;9233:33;9227:40;9221:4;9218:1;9212:4;9207:3;9196:78;9188:6;9184:91;9174:101;;9327:4;9318:7;9314:18;9308:25;9302:32;9299:1;9292:43;9410:4;9402;9393:7;9389:18;9383:25;9379:36;9373:43;9366:4;9363:1;9359:12;9352:65;9461:1;9455:8;9448:4;9445:1;9441:12;9434:30;9515:4;9512:1;9508:12;9502:19;9495:4;9492:1;9488:12;9481:41;9634:4;9625;9622:1;9618:12;9611:4;9606:3;9602:14;9598:33;9592:40;9586:4;9583:1;9577:4;9572:3;9561:78;9553:6;9549:91;9539:101;;8820:834;;;7334:3;;;;;;;7300:2364;;;;9691:1;9681:6;:11;9673:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9754:9;9766:5;9754:17;;9781:13;9824:1;9807:19;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;9807:19:4;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;9807:19:4;;;9797:30;;;;;;9781:46;;9842:9;9854:1;9842:13;;9837:163;9861:8;:15;;;;9857:1;:19;9837:163;;;9916:5;9901:8;9910:1;9901:11;;;;;;;;;;;;;;;;;;:20;9897:93;;;9948:4;9941:11;;9970:5;;9897:93;9878:3;;;;;;;9837:163;;;;10018:4;10017:5;10009:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10067:14;;;;;;;;;;;:23;;;:25;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10067:25:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10067:25:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10067:25:4;;;;;;;;;;;;;;;;10060:4;:32;10056:94;;;10108:14;;;;;;;;;;;:25;;;10134:4;10108:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10108:31:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10108:31:4;;;;10056:94;10167:14;;;;;;;;;;;:29;;;10197:3;10202;10207:1;10210;10213;10216:16;;10234:1;10237:5;10167:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10167:76:4;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10167:76:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10167:76:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10167:76:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10167:76:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10167:76:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10167:76:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10167:76:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10167:76:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10167:76:4;;;;;;;;;;;;;;;;10159:124;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10294:8;10308:5;10294:20;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;10294:20:4;;;;;;;;;;;;;;;;;;;;;;10329:19;10346:1;10329:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10329:19:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;6913:3442;;;;;;;;;;;:::o;10361:3139::-;10473:13;10516:1;10499:19;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10499:19:4;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;10499:19:4;;;10489:30;;;;;;10473:46;;10529:15;10538:5;10529:8;:15::i;:::-;10568:9;10563:1;:14;;:34;;;;;415:10;10581:9;:16;;10563:34;10555:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10641:28;;:::i;:::-;10672:10;:17;10683:5;10672:17;;;;;;;;;;;10641:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10795:1;10824:4;10818:11;10864:7;10858:14;10852:21;10849:1;10842:32;10934:4;10924:7;10918:14;10914:25;10908:32;10901:4;10898:1;10894:12;10887:54;11022:66;11015:4;11012:1;11008:12;11001:88;11130:66;11123:4;11120:1;11116:12;11109:88;11310:9;11242:66;11238:82;11231:4;11228:1;11224:12;11217:104;11412:4;11405;11402:1;11398:12;11392:4;11385;11382:1;11378:12;11372:4;11367:3;11356:61;11348:6;11344:74;11334:84;;11500:4;11490:7;11484:14;11478:4;11475:1;11469:4;11464:3;11453:52;11445:6;11441:65;11431:75;;11595:6;11588:14;11585:2;;;11631:1;11628;11621:12;11585:2;10767:890;;11686:7;11666:10;:17;11677:5;11666:17;;;;;;;;;;;:27;;;;;;;:::i;:::-;;11734:3;:10;11738:5;11734:10;;;;;;;;;;;11724:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11865:1;11894:4;11888:11;11934:7;11928:14;11922:21;11919:1;11912:32;12004:4;11994:7;11988:14;11984:25;11978:32;11971:4;11968:1;11964:12;11957:54;12045:66;12038:4;12035:1;12031:12;12024:88;12153:66;12146:4;12143:1;12139:12;12132:88;12333:9;12265:66;12261:82;12254:4;12251:1;12247:12;12240:104;12435:4;12428;12425:1;12421:12;12415:4;12408;12405:1;12401:12;12395:4;12390:3;12379:61;12371:6;12367:74;12357:84;;12523:4;12513:7;12507:14;12501:4;12498:1;12492:4;12487:3;12476:52;12468:6;12464:65;12454:75;;12618:6;12611:14;12608:2;;;12654:1;12651;12644:12;12608:2;11837:843;;12689:9;12701:5;12689:17;;12716:13;12759:1;12742:19;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;12742:19:4;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;12742:19:4;;;12732:30;;;;;;12716:46;;12777:9;12789:1;12777:13;;12772:231;12796:8;:15;;;;12792:1;:19;12772:231;;;12851:5;12836:8;12845:1;12836:11;;;;;;;;;;;;;;;;;;:20;12832:161;;;12951:4;12944:11;;12973:5;;12832:161;12813:3;;;;;;;12772:231;;;;13021:4;13020:5;13012:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13067:12;;;;;;;;;;;:23;;;13091:7;13099:1;13091:10;;;;;;;;;;;;;13103:7;13111:1;13103:10;;;;;;;;;;;;;13115:1;13118:9;13129:16;;13147:1;13150:10;13162:5;13067:101;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;13067:101:4;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;13067:101:4;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;13067:101:4;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;13067:101:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;13067:101:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13067:101:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;13067:101:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13067:101:4;;;;;;;;;;;;;;;;13059:145;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13222:4;;;;;;;;;;;:13;;;13236:10;13248:9;13222:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13222:36:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;13222:36:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13222:36:4;;;;;;;;;;;;;;;;13214:102;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13454:9;13444:6;;:19;;;;;;;;;;;13473:8;13487:5;13473:20;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;13473:20:4;;;;;;;;;;;;;;;;;;;;;;10361:3139;;;;;;;;:::o;1610:2113::-;1699:31;2134:12;2149:1;;:8;;2134:23;;2198:4;2178:25;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;2167:36;;2218:9;2230:1;2218:13;;2213:1504;2237:4;2233:1;:8;2213:1504;;;2262:13;2305:1;;2307;2305:4;;;;;;;;;;;;;;2288:22;;;;;;;;;30:3:-1;22:6;14;1:33;57:3;49:6;45:16;35:26;;2288:22:4;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2288:22:4;;;2278:33;;;;;;2262:49;;2339:3;:10;2343:5;2339:10;;;;;;;;;;;2325:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:8;2334:1;2325:11;;;;;;;;;;;;;;;;;:24;;;;2389:5;2367:12;:19;2380:5;2367:19;;;;;;;;;;;;:27;2363:1344;;;2414:28;;:::i;:::-;2445:10;:17;2456:5;2445:17;;;;;;;;;;;2414:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2525:1;2562:4;2556:11;2610:7;2604:14;2598:21;2595:1;2588:32;2688:4;2678:7;2672:14;2668:25;2662:32;2655:4;2652:1;2648:12;2641:54;2787:4;2784:1;2780:12;2773:4;2763:8;2759:19;2755:38;2749:45;2743:52;2737:59;2730:4;2727:1;2723:12;2716:81;2903:4;2893;2890:1;2886:12;2879:4;2869:8;2865:19;2861:38;2855:45;2849:52;2845:63;2839:70;2832:4;2829:1;2825:12;2818:92;3038:4;3028;3025:1;3021:12;3014:4;3004:8;3000:19;2996:38;2990:45;2984:52;2978:4;2975:1;2969:4;2964:3;2953:90;2945:6;2941:103;2931:113;;3100:4;3091:7;3087:18;3081:25;3075:32;3072:1;3065:43;3187:4;3179;3170:7;3166:18;3160:25;3156:36;3150:43;3143:4;3140:1;3136:12;3129:65;3299:4;3290;3287:1;3283:12;3276:4;3266:8;3262:19;3258:38;3252:45;3248:56;3242:63;3236:70;3229:4;3226:1;3222:12;3215:92;3424:4;3416;3407;3404:1;3400:12;3393:4;3383:8;3379:19;3375:38;3369:45;3365:56;3359:63;3355:74;3349:81;3342:4;3339:1;3335:12;3328:103;3570:4;3562;3553;3550:1;3546:12;3539:4;3529:8;3525:19;3521:38;3515:45;3511:56;3505:63;3499:4;3496:1;3490:4;3485:3;3474:101;3466:6;3462:114;3452:124;;3607:6;3600:14;3597:2;;;3651:1;3648;3641:12;3597:2;2489:1204;;;;2213:1504;2243:3;;;;;;;2213:1504;;;;1610:2113;;;;;;:::o;3729:1545::-;3781:9;3811:11;;3793:15;:29;;;;;;;;3781:41;;3858:1;3836:12;:19;3849:5;3836:19;;;;;;;;;;;;:23;3832:1327;;;3875:31;;:::i;:::-;:65;;;;;;;;;3910:3;:10;3914:5;3910:10;;;;;;;;;;;3875:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3922:10;:17;3933:5;3922:17;;;;;;;;;;;3875:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3995:1;4028:4;4022:11;4078:7;4072:14;4066:21;4060:28;4057:1;4050:39;4160:4;4149:7;4143:14;4137:21;4133:32;4127:39;4120:4;4117:1;4113:12;4106:61;4236:4;4227:7;4223:18;4217:25;4211:32;4205:39;4198:4;4195:1;4191:12;4184:61;4327:4;4318;4309:7;4305:18;4299:25;4293:32;4289:43;4283:50;4276:4;4273:1;4269:12;4262:72;4427:4;4416:7;4410:14;4404:21;4398:4;4395:1;4389:4;4384:3;4373:59;4365:6;4361:72;4351:82;;4492:4;4482:7;4476:14;4472:25;4466:32;4460:39;4457:1;4450:50;4582:4;4574;4564:7;4558:14;4554:25;4548:32;4544:43;4538:50;4531:4;4528:1;4524:12;4517:72;4670:4;4662;4653:7;4649:18;4643:25;4639:36;4633:43;4627:50;4620:4;4617:1;4613:12;4606:72;4771:4;4763;4755;4746:7;4742:18;4736:25;4732:36;4726:43;4722:54;4716:61;4709:4;4706:1;4702:12;4695:83;4882:4;4874;4864:7;4858:14;4854:25;4848:32;4842:4;4839:1;4833:4;4828:3;4817:70;4809:6;4805:83;4795:93;;4915:6;4908:14;4905:2;;;4955:1;4952;4945:12;4905:2;3963:1026;;5015:7;5023:1;5015:10;;;;;;;;;;;;;5002:3;:10;5006:5;5002:10;;;;;;;;;;;:23;;;;;;;:::i;:::-;;5039:72;;;;;;;;;;;;;;;;;;5069:1;5061:10;;5039:72;;;;5081:1;5073:10;;5039:72;;;;;;;;;;;;;;;;5095:1;5087:10;;5039:72;;;;5107:1;5099:10;;5039:72;;;;;;:10;:17;5050:5;5039:17;;;;;;;;;;;:72;;;;;;;:::i;:::-;;5147:1;5125:12;:19;5138:5;5125:19;;;;;;;;;;;:23;;;;3832:1327;;5191:1;5172:16;;:20;5168:100;;;5227:1;5208:16;:20;;;;5249:8;;5242:15;;;;:::i;:::-;5168:100;3729:1545;;:::o;111:13391::-;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;111:13391:4;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;111:13391:4;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o",
  "source": "pragma solidity 0.5.4;\n\nimport './ZetherVerifier.sol';\nimport './BurnVerifier.sol';\nimport './CashToken.sol';\n\ncontract ZSC {\n    CashToken coin;\n    ZetherVerifier zetherverifier;\n    BurnVerifier burnverifier;\n    uint256 public epochLength; // now in milliseconds.\n\n    uint256 bTotal = 0; // could use erc20.balanceOf(this), but (even pure / view) calls cost gas during EVM execution\n    uint256 constant MAX = 4294967295; // 2^32 - 1 // no sload for constants...!\n    mapping(bytes32 => bytes32[2][2]) acc; // main account mapping\n    mapping(bytes32 => bytes32[2][2]) pTransfers; // storage for pending transfers\n    mapping(bytes32 => uint256) lastRollOver;\n    bytes32[] nonceSet; // would be more natural to use a mapping, but they can't be deleted / reset!\n    uint256 lastGlobalUpdate = 0; // will be also used as a proxy for \"current epoch\", seeing as rollovers will be anticipated\n    // not implementing account locking for now...revisit\n\n    event TransferOccurred(bytes32[2][] parties); // all parties will be notified, client can determine whether it was real or not.\n    // arg is still necessary for transfers---not even so much to know when you received a transfer, as to know when you got rolled over.\n\n    constructor(address _coin, address _zether, address _burn, uint256 _epochLength) public {\n        // epoch length, like block.time, is in _seconds_. 4 is the minimum!!! (To allow a withdrawal to go through.)\n        coin = CashToken(_coin);\n        zetherverifier = ZetherVerifier(_zether);\n        burnverifier = BurnVerifier(_burn);\n        epochLength = _epochLength;\n    }\n\n    function simulateAccounts(bytes32[2][] calldata y, uint256 epoch) view external returns (bytes32[2][2][] memory accounts) {\n        // all of this could be assembled locally by querying `acc` and `pTransfers` (and `lastRollOver`) and assembling things by hand\n        // turns out this is extremely _slow_ though, because of the ~ 4 * N queries which must be made. turns out it's much faster\n        // to simply move the entire process into a contract method, and in fact this allows us to make the above 3 private\n        uint256 size = y.length;\n        accounts = new bytes32[2][2][](size);\n        for (uint256 i = 0; i < size; i++) {\n            bytes32 yHash = keccak256(abi.encodePacked(y[i]));\n            accounts[i] = acc[yHash];\n            if (lastRollOver[yHash] < epoch) {\n                bytes32[2][2] memory scratch = pTransfers[yHash];\n                assembly {\n                    let result := 1\n                    let m := mload(0x40)\n                    mstore(m, mload(mload(scratch)))\n                    mstore(add(m, 0x20), mload(add(mload(scratch), 0x20)))\n                    mstore(add(m, 0x40), mload(mload(mload(add(add(accounts, 0x20), mul(i, 0x20))))))\n                    mstore(add(m, 0x60), mload(add(mload(mload(add(add(accounts, 0x20), mul(i, 0x20)))), 0x20)))\n                    result := and(result, staticcall(gas, 0x06, m, 0x80, mload(mload(add(add(accounts, 0x20), mul(i, 0x20)))), 0x40))\n                    mstore(m, mload(mload(add(scratch, 0x20))))\n                    mstore(add(m, 0x20), mload(add(mload(add(scratch, 0x20)), 0x20)))\n                    mstore(add(m, 0x40), mload(mload(add(mload(add(add(accounts, 0x20), mul(i, 0x20))), 0x20))))\n                    mstore(add(m, 0x60), mload(add(mload(add(mload(add(add(accounts, 0x20), mul(i, 0x20))), 0x20)), 0x20)))\n                    result := and(result, staticcall(gas, 0x06, m, 0x80, mload(add(mload(add(add(accounts, 0x20), mul(i, 0x20))), 0x20)), 0x40))\n                    if iszero(result) {\n                        revert(0, 0)\n                    }\n                }\n            }\n        }\n    }\n\n    function rollOver(bytes32 yHash) internal {\n        uint256 e = block.timestamp / epochLength;\n        if (lastRollOver[yHash] < e) {\n            bytes32[2][2][2] memory scratch = [acc[yHash], pTransfers[yHash]];\n            assembly {\n                let result := 1\n                let m := mload(0x40)\n                mstore(m, mload(mload(mload(scratch))))\n                mstore(add(m, 0x20), mload(add(mload(mload(scratch)), 0x20)))\n                mstore(add(m, 0x40), mload(mload(mload(add(scratch, 0x20)))))\n                mstore(add(m, 0x60), mload(add(mload(mload(add(scratch, 0x20))), 0x20)))\n                result := and(result, staticcall(gas, 0x06, m, 0x80, mload(mload(scratch)), 0x40))\n                mstore(m, mload(mload(add(mload(scratch), 0x20))))\n                mstore(add(m, 0x20), mload(add(mload(add(mload(scratch), 0x20)), 0x20)))\n                mstore(add(m, 0x40), mload(mload(add(mload(add(scratch, 0x20)), 0x20))))\n                mstore(add(m, 0x60), mload(add(mload(add(mload(add(scratch, 0x20)), 0x20)), 0x20)))\n                result := and(result, staticcall(gas, 0x06, m, 0x80, mload(add(mload(scratch), 0x20)), 0x40))\n                if iszero(result) {\n                    revert(0, 0)\n                }\n            }\n            acc[yHash] = scratch[0];\n            pTransfers[yHash] = [[bytes32(0), bytes32(0)], [bytes32(0), bytes32(0)]];\n            lastRollOver[yHash] = e;\n        }\n        if (lastGlobalUpdate < e) {\n            lastGlobalUpdate = e;\n            delete nonceSet;\n        }\n    }\n\n    function fund(bytes32[2] calldata y, uint256 bTransfer) external {\n        bytes32 yHash = keccak256(abi.encodePacked(y));\n        rollOver(yHash);\n\n        // registration check here would be redundant, as any `transferFrom` the 0 address will necessarily fail. save an sload\n        require(bTransfer <= MAX, \"Deposit amount out of range.\"); // uint, so other way not necessary?\n        require(bTransfer + bTotal <= MAX, \"Fund pushes contract past maximum value.\");\n        // if pTransfers[yHash] == [0, 0, 0, 0] then an add and a write will be equivalent...\n        bytes32[2] memory scratch = pTransfers[yHash][0];\n        // won't let me assign this array using literals / casts\n        assembly {\n            let m := mload(0x40)\n            let result := 1\n            mstore(m, mload(scratch))\n            mstore(add(m, 0x20), mload(add(scratch, 0x20)))\n            mstore(add(m, 0x40), 0x077da99d806abd13c9f15ece5398525119d11e11e9836b2ee7d23f6159ad87d4)\n            mstore(add(m, 0x60), 0x01485efa927f2ad41bff567eec88f32fb0a0f706588b4e41a8d587d008b7f875)\n            mstore(add(m, 0x80), bTransfer) // b will hopefully be a primitive / literal and not a pointer / address?\n            result := and(result, staticcall(gas, 0x07, add(m, 0x40), 0x60, add(m, 0x40), 0x40))\n            result := and(result, staticcall(gas, 0x06, m, 0x80, scratch, 0x40))\n            if iszero(result) {\n                revert(0, 0)\n            }\n        }\n        pTransfers[yHash][0] = scratch;\n        require(coin.transferFrom(msg.sender, address(this), bTransfer), \"Transfer from sender failed.\");\n        bTotal += bTransfer;\n    }\n\n    function transfer(bytes32[2][] memory C, bytes32[2] memory D, bytes32[2][] memory y, bytes32[2] memory u, bytes memory proof) public {\n        uint256 size = y.length;\n        bytes32[2][] memory CLn = new bytes32[2][](size);\n        bytes32[2][] memory CRn = new bytes32[2][](size);\n        require(C.length == size, \"Input array length mismatch!\");\n        uint256 result = 1;\n        for (uint256 i = 0; i < y.length; i++) {\n            bytes32 yHash = keccak256(abi.encodePacked(y[i]));\n            rollOver(yHash);\n            bytes32[2][2] memory scratch = pTransfers[yHash];\n            assembly {\n                let m := mload(0x40)\n                mstore(m, mload(mload(scratch)))\n                mstore(add(m, 0x20), mload(add(mload(scratch), 0x20)))\n                // calldatacopy(add(m, 0x40), add(0x104, mul(i, 0x40)), 0x40) // copy C[i] onto running block\n                // having to change external --> public to avoid stacktoodeep\n                // as a result, have to use the below two lines instead of the above single line.\n                mstore(add(m, 0x40), mload(mload(add(add(C, 0x20), mul(i, 0x20)))))\n                mstore(add(m, 0x60), mload(add(mload(add(add(C, 0x20), mul(i, 0x20))), 0x20)))\n                result := and(result, staticcall(gas, 0x06, m, 0x80, mload(scratch), 0x40))\n                mstore(m, mload(mload(add(scratch, 0x20))))\n                mstore(add(m, 0x20), mload(add(mload(add(scratch, 0x20)), 0x20)))\n                // calldatacopy(add(m, 0x40), 0x24, 0x40) // copy R onto running block\n                mstore(add(m, 0x40), mload(D))\n                mstore(add(m, 0x60), mload(add(D, 0x20)))\n                result := and(result, staticcall(gas, 0x06, m, 0x80, mload(add(scratch, 0x20)), 0x40))\n            }\n            pTransfers[yHash] = scratch; // credit / debit / neither y's account.\n            scratch = acc[yHash];\n            assembly {\n                let m := mload(0x40)\n                mstore(m, mload(mload(scratch)))\n                mstore(add(m, 0x20), mload(add(mload(scratch), 0x20)))\n                mstore(add(m, 0x40), mload(mload(add(add(C, 0x20), mul(i, 0x20)))))\n                mstore(add(m, 0x60), mload(add(mload(add(add(C, 0x20), mul(i, 0x20))), 0x20)))\n                result := and(result, staticcall(gas, 0x06, m, 0x80, mload(add(add(CLn, 0x20), mul(i, 0x20))), 0x40))\n                mstore(m, mload(mload(add(scratch, 0x20))))\n                mstore(add(m, 0x20), mload(add(mload(add(scratch, 0x20)), 0x20)))\n                mstore(add(m, 0x40), mload(D))\n                mstore(add(m, 0x60), mload(add(D, 0x20)))\n                result := and(result, staticcall(gas, 0x06, m, 0x80, mload(add(add(CRn, 0x20), mul(i, 0x20))), 0x40))\n            }\n        }\n        require(result == 1, \"Elliptic curve operations failure. Bad points?\");\n\n        bool seen = false;\n        bytes32 uHash = keccak256(abi.encodePacked(u));\n        for (uint256 i = 0; i < nonceSet.length; i++) {\n            if (nonceSet[i] == uHash) {\n                seen = true;\n                break;\n            }\n        }\n        require(!seen, \"Nonce already seen!\");\n        if (size > zetherverifier.baseSize()) {\n            zetherverifier.extendBase(size);\n        }\n        require(zetherverifier.verifyTransfer(CLn, CRn, C, D, y, lastGlobalUpdate, u, proof), \"Transfer proof verification failed!\");\n\n        nonceSet.push(uHash);\n        emit TransferOccurred(y);\n    }\n\n    function burn(bytes32[2] memory y, uint256 bTransfer, bytes32[2] memory u, bytes memory proof) public {\n        bytes32 yHash = keccak256(abi.encodePacked(y));\n        rollOver(yHash);\n\n        require(0 <= bTransfer && bTransfer <= MAX, \"Transfer amount out of range.\");\n        bytes32[2][2] memory scratch = pTransfers[yHash]; // could technically use sload, but... let's not go there.\n        assembly {\n            let result := 1\n            let m := mload(0x40)\n            mstore(m, mload(mload(scratch)))\n            mstore(add(m, 0x20), mload(add(mload(scratch), 0x20)))\n            // load bulletproof generator here\n            mstore(add(m, 0x40), 0x077da99d806abd13c9f15ece5398525119d11e11e9836b2ee7d23f6159ad87d4) // g_x\n            mstore(add(m, 0x60), 0x01485efa927f2ad41bff567eec88f32fb0a0f706588b4e41a8d587d008b7f875) // g_y\n            mstore(add(m, 0x80), sub(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001, bTransfer))\n            result := and(result, staticcall(gas, 0x07, add(m, 0x40), 0x60, add(m, 0x40), 0x40))\n            result := and(result, staticcall(gas, 0x06, m, 0x80, mload(scratch), 0x40)) // scratch[0] = acc[yHash][0] * g ^ -b, scratch[1] doesn't change\n            if iszero(result) {\n                revert(0, 0)\n            }\n        }\n        pTransfers[yHash] = scratch; // debit y's balance\n        scratch = acc[yHash]; // simulate debit of acc---just for use in verification, won't be applied\n        assembly {\n            let result := 1\n            let m := mload(0x40)\n            mstore(m, mload(mload(scratch)))\n            mstore(add(m, 0x20), mload(add(mload(scratch), 0x20)))\n            mstore(add(m, 0x40), 0x077da99d806abd13c9f15ece5398525119d11e11e9836b2ee7d23f6159ad87d4) // g_x\n            mstore(add(m, 0x60), 0x01485efa927f2ad41bff567eec88f32fb0a0f706588b4e41a8d587d008b7f875) // g_y\n            mstore(add(m, 0x80), sub(0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001, bTransfer))\n            result := and(result, staticcall(gas, 0x07, add(m, 0x40), 0x60, add(m, 0x40), 0x40))\n            result := and(result, staticcall(gas, 0x06, m, 0x80, mload(scratch), 0x40)) // scratch[0] = acc[yHash][0] * g ^ -b, scratch[1] doesn't change\n            if iszero(result) {\n                revert(0, 0)\n            }\n        }\n        bool seen = false;\n        bytes32 uHash = keccak256(abi.encodePacked(u));\n        for (uint256 i = 0; i < nonceSet.length; i++) {\n            if (nonceSet[i] == uHash) { // does this have to repeat the sload for each iteration?!? revisit\n                seen = true;\n                break;\n            }\n        }\n        require(!seen, \"Nonce already seen!\");\n        require(burnverifier.verifyBurn(scratch[0], scratch[1], y, bTransfer, lastGlobalUpdate, u, msg.sender, proof), \"Burn proof verification failed!\");\n        require(coin.transfer(msg.sender, bTransfer), \"This shouldn't fail... Something went severely wrong.\");\n        // note: change from Zether spec. should use bound address not msg.sender, to prevent \"front-running attack\".\n        bTotal -= bTransfer;\n        nonceSet.push(uHash);\n    }\n}\n",
  "sourcePath": "/Users/benediamond/anonymous-zether/packages/protocol/contracts/ZSC.sol",
  "compiler": {
    "name": "solc",
    "version": "0.5.4+commit.9549d8ff.Emscripten.clang"
  },
  "networks": {
    "10": {
      "events": {},
      "links": {},
      "address": "0x9300E94708188ab718E2D4677c8499bD934100bC",
      "transactionHash": "0x0c7c473fa969f30fb6790fc14c2bdb2ad638b4743233683df3e823484628937e"
    },
    "5777": {
      "events": {},
      "links": {},
      "address": "0xE763EFD0D09347cb09A342620d354BB92e1fE283",
      "transactionHash": "0x24576edef430d5bc90c56f20e55d2bfcf92342d618652a4dc7b8efc2dd1e43ee"
    }
  },
  "schemaVersion": "3.0.9",
  "updatedAt": "2019-10-28T14:29:43.069Z",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  }
}