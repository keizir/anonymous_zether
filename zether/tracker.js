// =================================
// START: Web3 deploy code
// =================================

/* beautify ignore:start */
var zscContract = web3.eth.contract([{"constant":false,"inputs":[{"name":"outL","type":"bytes32[2]"},{"name":"inL","type":"bytes32[2]"},{"name":"inOutR","type":"bytes32[2]"},{"name":"y","type":"bytes32[2]"},{"name":"yBar","type":"bytes32[2]"},{"name":"proof","type":"bytes"},{"name":"signature","type":"bytes32[3]"}],"name":"transfer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"ethAddrs","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"y","type":"bytes32[2]"},{"name":"bTransfer","type":"uint256"}],"name":"fund","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"},{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"name":"acc","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"ctr","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"},{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"name":"pTransfers","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"y","type":"bytes32[2]"},{"name":"bTransfer","type":"uint256"},{"name":"proof","type":"bytes"},{"name":"signature","type":"bytes32[3]"}],"name":"burn","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"y","type":"bytes32[2]"}],"name":"rollOver","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"domainHash","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_coin","type":"address"},{"name":"_chainId","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"roller","type":"bytes32[2]"}],"name":"RollOverOccurred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"funder","type":"bytes32[2]"}],"name":"FundOccurred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"burner","type":"bytes32[2]"}],"name":"BurnOccurred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"sender","type":"bytes32[2]"}],"name":"TransferFrom","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"recipient","type":"bytes32[2]"}],"name":"TransferTo","type":"event"}]);
/* beautify ignore:end */

// =================================
// END: Web3 deploy code
// =================================

var _chainId = 10;

function _deployZSC(coin) {
    // =================================
    // START: Web3 deploy code
    // =================================
    var zsc = zscContract.new(
        coin,
        _chainId, {
            from: web3.eth.accounts[0],
            data: '0x608060405260405161001090610190565b604051809103906000f08015801561002c573d6000803e3d6000fd5b50600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060045534801561007e57600080fd5b50604051604080620027208339810180604052604081101561009f57600080fd5b810190808051906020019092919080519060200190929190505050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006040517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81527fc9d54de6bfed12ed581fc7d2c1ae5f8778aaf7c177d117fdbb15c71c94be6f8860208201527fae209a0b48f21c054280f2455d32cf309387644879d9acbd8ffc199163811885604082015282606082015230608082015260a081209150508060028190555050505061019e565b6107218062001fff83390190565b611e5180620001ae6000396000f3fe608060405234801561001057600080fd5b50600436106100b0576000357c01000000000000000000000000000000000000000000000000000000009004806373edb37b1161008357806373edb37b1461026757806380a25373146102a9578063ba909191146102ff578063d246fda014610396578063dfe86ac5146103c4576100b0565b8063151c4d8d146100b557806342b30cd61461016b5780635464befb146101d95780635b7f82f414610211575b600080fd5b61016960048036036101c08110156100cc57600080fd5b8101908080604001909192919290806040019091929192908060400190919291929080604001909192919290806040019091929192908035906020019064010000000081111561011b57600080fd5b82018360208201111561012d57600080fd5b8035906020019184600183028401116401000000008311171561014f57600080fd5b9091929391929390806060019091929192905050506103e2565b005b6101976004803603602081101561018157600080fd5b8101908080359060200190929190505050610a75565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61020f600480360360608110156101ef57600080fd5b810190808060400190919291929080359060200190929190505050610aa8565b005b6102516004803603606081101561022757600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050610fd1565b6040518082815260200191505060405180910390f35b6102936004803603602081101561027d57600080fd5b810190808035906020019092919050505061100a565b6040518082815260200191505060405180910390f35b6102e9600480360360608110156102bf57600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050611022565b6040518082815260200191505060405180910390f35b610394600480360360e081101561031557600080fd5b8101908080604001909192919290803590602001909291908035906020019064010000000081111561034657600080fd5b82018360208201111561035857600080fd5b8035906020019184600183028401116401000000008311171561037a57600080fd5b90919293919293908060600190919291929050505061105b565b005b6103c2600480360360408110156103ac57600080fd5b81019080806040019091929192905050506114e4565b005b6103cc611930565b6040518082815260200191505060405180910390f35b600085604051602001808260026020028082843780830192505050915050604051602081830303815290604052805190602001209050600085604051602001808260026020028082843780830192505050915050604051602081830303815290604052805190602001209050610456611bcc565b60056000848152602001908152602001600020600280602002604051908101604052809291906000905b828210156104d9578382600202016002806020026040519081016040528092919082600280156104c5576020028201915b8154815260200190600101908083116104b1575b505050505081526020019060010190610480565b5050505090506001604051825151815260208351015160208201526040600460408301377f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000060808201526040808201606060408401600060075af18216915060408351608083600060065af1821691506020830151518152602080840151015160208201526040608460408301377f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000060808201526040808201606060408401600060075af18216915060406020840151608083600060065af1821691508115156105c257600080fd5b5050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ea59a87f82600060028110151561061157fe5b602002015183600160028110151561062557fe5b60200201518e8e8e8e8e8e8e6040518a63ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808a600260200280838360005b8381101561068757808201518184015260208101905061066c565b5050505090500189600260200280838360005b838110156106b557808201518184015260208101905061069a565b5050505090500188600260200280828437600081840152601f19601f82011690508083019250505087600260200280828437600081840152601f19601f82011690508083019250505086600260200280828437600081840152601f19601f82011690508083019250505085600260200280828437600081840152601f19601f82011690508083019250505084600260200280828437600081840152601f19601f820116905080830192505050806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509a505050505050505050505060206040518083038186803b1580156107b457600080fd5b505afa1580156107c8573d6000803e3d6000fd5b505050506040513d60208110156107de57600080fd5b81019080805190602001909291905050501515610863576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f696e76616c6964207472616e736665722070726f6f660000000000000000000081525060200191505060405180910390fd5b8060056000858152602001908152602001600020906002610885929190611bfa565b5060066000838152602001908152602001600020600280602002604051908101604052809291906000905b82821015610909578382600202016002806020026040519081016040528092919082600280156108f5576020028201915b8154815260200190600101908083116108e1575b5050505050815260200190600101906108b0565b50505050905060016040518251518152602083510151602082015260406044604083013760408351608083600060065af18216915060208301515181526020808401510151602082015260406084604083013760406020840151608083600060065af18216915081151561097c57600080fd5b505080600660008481526020019081526020016000209060026109a0929190611bfa565b5060086000848152602001908152602001600020600081548092919060010191905055507fbd24f8f2c91e1635142f713e573e2d57ca34de67e93613c543acfb868d3ae9c4886040518082600260200280828437600081840152601f19601f82011690508083019250505091505060405180910390a17f24ddbd5390bd6a99a153e5c6d7c0df7b25a9f9ae98ef0ebf4389afa1008468df876040518082600260200280828437600081840152601f19601f82011690508083019250505091505060405180910390a15050505050505050505050565b60076020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000826040516020018082600260200280828437808301925050509150506040516020818303038152906040528051906020012090506401000000006004548301101515610b41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180611daf6028913960400191505060405180910390fd5b600060086000838152602001908152602001600020541415610bc957336007600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160086000838152602001908152602001600020819055505b610bd1611bcc565b604080519081016040528060408051908101604052806000600102815260200160006001028152508152602001604080519081016040528060006001028152602001600060010281525081525090506040517f077da99d806abd13c9f15ece5398525119d11e11e9836b2ee7d23f6159ad87d481527f01485efa927f2ad41bff567eec88f32fb0a0f706588b4e41a8d587d008b7f875602082015283604082015260408251606083600060075af11515610c8a57600080fd5b50600660008381526020019081526020016000206000600281101515610cac57fe5b60020201600280602002604051908101604052809291908260028015610ce7576020028201915b815481526020019060010190808311610cd3575b5050505050816001600281101515610cfb57fe5b60200201819052506040518151518152602082510151602082015260208201515160408201526020808301510151606082015260408251608083600060065af11515610d4657600080fd5b50806000600281101515610d5657fe5b6020020151600660008481526020019081526020016000206000600281101515610d7c57fe5b60020201906002610d8e929190611c4a565b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd6007600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1630866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015610eba57600080fd5b505af1158015610ece573d6000803e3d6000fd5b505050506040513d6020811015610ee457600080fd5b81019080805190602001909291905050501515610f69576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f5472616e736665722066726f6d2073656e646572206661696c6564000000000081525060200191505060405180910390fd5b826004600082825401925050819055507fee09cc7fa61426187b532bb1fee93c0642109da02bcd9cfae5525c1df14ded96846040518082600260200280828437600081840152601f19601f82011690508083019250505091505060405180910390a150505050565b600560205282600052604060002082600281101515610fec57fe5b6002020181600281101515610ffd57fe5b0160009250925050505481565b60086020528060005260406000206000915090505481565b60066020528260005260406000208260028110151561103d57fe5b600202018160028110151561104e57fe5b0160009250925050505481565b600085604051602001808260026020028082843780830192505050915050604051602081830303815290604052805190602001209050846000111580156110a6575064010000000085105b151561111a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f5472616e7366657220616d6f756e74206f7574206f662072616e67650000000081525060200191505060405180910390fd5b611122611bcc565b60056000838152602001908152602001600020600280602002604051908101604052809291906000905b828210156111a557838260020201600280602002604051908101604052809291908260028015611191576020028201915b81548152602001906001019080831161117d575b50505050508152602001906001019061114c565b5050505090506001604051825151815260208351015160208201527f077da99d806abd13c9f15ece5398525119d11e11e9836b2ee7d23f6159ad87d460408201527f01485efa927f2ad41bff567eec88f32fb0a0f706588b4e41a8d587d008b7f8756060820152877f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010360808201526040808201606060408401600060075af18216915060408351608083600060065af18216915081151561126657600080fd5b50506112aa8287856003806020026040519081016040528092919082600360200280828437600081840152601f19601f820116905080830192505050505050611936565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6007600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156113a157600080fd5b505af11580156113b5573d6000803e3d6000fd5b505050506040513d60208110156113cb57600080fd5b81019080805190602001909291905050501515611433576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526034815260200180611d7b6034913960400191505060405180910390fd5b8060056000848152602001908152602001600020906002611455929190611bfa565b506008600083815260200190815260200160002060008154809291906001019190505550856004600082825403925050819055507fc4f538d91f144975b9e9d73db4fb5881b5373593b10c8d16c02546accae806f0876040518082600260200280828437600081840152601f19601f82011690508083019250505091505060405180910390a150505050505050565b6000816040516020018082600260200280828437808301925050509150506040516020818303038152906040528051906020012090506007600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115d3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180611dfe6028913960400191505060405180910390fd5b6115db611c8a565b60806040519081016040528060056000858152602001908152602001600020600060028110151561160857fe5b60020201600280602002604051908101604052809291908260028015611643576020028201915b81548152602001906001019080831161162f575b5050505050815260200160066000858152602001908152602001600020600060028110151561166e57fe5b600202016002806020026040519081016040528092919082600280156116a9576020028201915b815481526020019060010190808311611695575b505050505081526020016005600085815260200190815260200160002060016002811015156116d457fe5b6002020160028060200260405190810160405280929190826002801561170f576020028201915b8154815260200190600101908083116116fb575b5050505050815260200160066000858152602001908152602001600020600160028110151561173a57fe5b60020201600280602002604051908101604052809291908260028015611775576020028201915b815481526020019060010190808311611761575b5050505050815250905060016040518251518152602083510151602082015260208301515160408201526020808401510151606082015260408351608083600060065af1821691506040830151518152602060408401510151602082015260608301515160408201526020606084015101516060820152604080840151608083600060065af18216915081151561180b57600080fd5b5050604080519081016040528082600060048110151561182757fe5b6020020151815260200182600260048110151561184057fe5b602002015181525060056000848152602001908152602001600020906002611869929190611bfa565b506040805190810160405280604080519081016040528060006001028152602001600060010281525081526020016040805190810160405280600060010281526020016000600102815250815250600660008481526020019081526020016000209060026118d8929190611bfa565b507f32d5319a46863eb82eacf55828338d265f5eea9b15a8d5c77bdaeea16ff34e4c836040518082600260200280828437600081840152601f19601f82011690508083019250505091505060405180910390a1505050565b60025481565b600060025490506000806008600087815260200190815260200160002054905060606040805190810160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250905060405161190181528460208201527f9d72b69945fb58354dfc76c7c1408fc89879b343a0105554190526fc4171d45560408201528660608201528260808201526060604082012060408201526042601e8201209350506000600182856040516020018083805190602001908083835b602083101515611a2457805182526020820191506020810190506020830392506119ff565b6001836020036101000a0380198251168184511680821785525050505050509050018281526020019250505060405160208183030381529060405280519060200120876000600381101515611a7557fe5b602002015160019004886001600381101515611a8d57fe5b6020020151896002600381101515611aa157fe5b602002015160405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611afd573d6000803e3d6000fd5b5050506020604051035190506007600089815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515611bc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180611dd76027913960400191505060405180910390fd5b5050505050505050565b6080604051908101604052806002905b611be4611cb9565b815260200190600190039081611bdc5790505090565b82600280028101928215611c39579160200282015b82811115611c3857825182906002611c28929190611cdb565b5091602001919060020190611c0f565b5b509050611c469190611d1b565b5090565b8260028101928215611c79579160200282015b82811115611c78578251825591602001919060010190611c5d565b5b509050611c869190611d47565b5090565b610100604051908101604052806004905b611ca3611cb9565b815260200190600190039081611c9b5790505090565b6040805190810160405280600290602082028038833980820191505090505090565b8260028101928215611d0a579160200282015b82811115611d09578251825591602001919060010190611cee565b5b509050611d179190611d47565b5090565b611d4491905b80821115611d405760008181611d379190611d6c565b50600201611d21565b5090565b90565b611d6991905b80821115611d65576000816000905550600101611d4d565b5090565b90565b50600081556001016000905556fe546869732073686f756c646e2774206661696c2e2e2e20536f6d657468696e672077656e74207365766572656c792077726f6e6746756e642070757368657320636f6e74726163742070617374206d6178696d756d2076616c75652e5369676e617475726520696e76616c6964206f7220666f722077726f6e6720616464726573732e4e6f207065726d697373696f6e20746f20726f6c6c206f7665722074686973206163636f756e742ea165627a7a7230582082bba2899c3524adf443f79175499264fc37146562a33eb99da75099483da3870029608060405234801561001057600080fd5b50610701806100206000396000f3fe608060405234801561001057600080fd5b5060043610610053576000357c010000000000000000000000000000000000000000000000000000000090048063ea59a87f14610058578063f43fd09c14610130575b600080fd5b61011660048036036101e081101561006f57600080fd5b8101908080604001909192919290806040019091929192908060400190919291929080604001909192919290806040019091929192908060400190919291929080604001909192919290803590602001906401000000008111156100d257600080fd5b8201836020820111156100e457600080fd5b8035906020019184600183028401116401000000008311171561010657600080fd5b90919293919293905050506101ea565b604051808215151515815260200191505060405180910390f35b6101d0600480360361010081101561014757600080fd5b81019080806040019091929192908060400190919291929080604001909192919290803590602001909291908035906020019064010000000081111561018c57600080fd5b82018360208201111561019e57600080fd5b803590602001918460018302840111640100000000831117156101c057600080fd5b9091929391929390505050610496565b604051808215151515815260200191505060405180910390f35b600060606104398b600060028110151561020057fe5b60200201358c600160028110151561021457fe5b60200201358c600060028110151561022857fe5b60200201358d600160028110151561023c57fe5b60200201358d600060028110151561025057fe5b60200201358e600160028110151561026457fe5b60200201358e600060028110151561027857fe5b60200201358f600160028110151561028c57fe5b602002013560405160200180898152602001888152602001878152602001868152602001858152602001848152602001838152602001828152602001985050505050505050506040516020818303038152906040528860006002811015156102f057fe5b602002013589600160028110151561030457fe5b602002013589600060028110151561031857fe5b60200201358a600160028110151561032c57fe5b60200201358a600060028110151561034057fe5b60200201358b600160028110151561035457fe5b60200201356040516020018088805190602001908083835b602083101515610391578051825260208201915060208101905060208303925061036c565b6001836020036101000a03801982511681845116808217855250505050505090500187815260200186815260200185815260200184815260200183815260200182815260200197505050505050505060405160208183030381529060405285858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610603565b90506104436106b2565b602081611000846009600019fa151561045b57600080fd5b600181600060018110151561046c57fe5b6020020151141561048257600192505050610489565b6000925050505b9998505050505050505050565b600060606105a98860006002811015156104ac57fe5b60200201358960016002811015156104c057fe5b60200201358960006002811015156104d457fe5b60200201358a60016002811015156104e857fe5b60200201358a60006002811015156104fc57fe5b60200201358b600160028110151561051057fe5b60200201358b6040516020018088815260200187815260200186815260200185815260200184815260200183815260200182815260200197505050505050505060405160208183030381529060405285858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610603565b90506105b36106b2565b60208161100084600a600019fa15156105cb57600080fd5b60018160006001811015156105dc57fe5b602002015114156105f2576001925050506105f9565b6000925050505b9695505050505050565b6060600083519050600083518201905060006020601f87510181151561062557fe5b04905060006020601f87510181151561063a57fe5b04905060405183815260005b8381101561066d578060010160200289015181600101602002830152806001019050610646565b5060005b8281101561069a5780600101602002880151868260010160200201830152806001019050610671565b50836020018101604052809550505050505092915050565b60206040519081016040528060019060208202803883398082019150509050509056fea165627a7a72305820f16a380e00fb14e41f696dec782ff908b8d19f583fda979c23fdb268db880f830029',
            gas: '4700000'
        },
        function(e, contract) {
            if (typeof contract.address !== 'undefined') {
                console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
            }
        })
    // =================================
    // END: Web3 deploy code
    // =================================
    return zsc;
}

function _recoverZSC(address) {
    var zsc = zscContract.at(address);
    return zsc;
}

var demo = (function() {
    return {
        deployZSC: function(coin) {
            return _deployZSC(coin);
        },
        recoverZSC: function(address) {
            return _recoverZSC(address);
        },
    };
})();


function tracker(zsc) {
    this.zsc = zsc;
    this.keypair = zether.createAccount();
    this.balance = 0; // reflects WOULD-BE value in acc (i.e., if rollOver were called). do not touch this manually
    // had to make it public only so that it could be modified by callbacks. don't change it yourself!

    var yHash = web3.sha3(this.keypair['y'][0].slice(2) + this.keypair['y'][1].slice(2), { encoding: 'hex' });
    var that = this;

    zsc.TransferTo(function(error, event) { // automatically watch for incoming transfers
        if (error) {
            console.log("Error: " + error);
        } else {
            if (that.mine(event.args['recipient'])) {
                var peek = that.peek();
                // var difference = peek - that.balance;
                console.log("Transfer received! New balance is " + peek + ".");
                // hard actually to report the net new value.
            }
        }
    });

    // these sign functions are specialized and ad-hoc. todo: implement general EIP-712.
    var signTransfer = function(yBar, outL, inL, inOutR) {
        var domainHash = that.zsc.domainHash().slice(2)
        var typeHash = 'a749c2b2aa979f63aed9ba228701786d8f263ff542fe87003a0ec711252431fe' // keccak256 hash of "ZETHER_TRANSFER_SIGNATURE(bytes32[2] yBar,bytes32[2] inL,bytes32[2] outL, bytes32[2] inOutR,uint256 count)"
        var yBarHash = web3.sha3(yBar[0].slice(2) + yBar[1].slice(2), { encoding: 'hex' }).slice(2)
        var outLHash = web3.sha3(outL[0].slice(2) + outL[1].slice(2), { encoding: 'hex' }).slice(2)
        var inLHash = web3.sha3(inL[0].slice(2) + inL[1].slice(2), { encoding: 'hex' }).slice(2)
        var inOutRHash = web3.sha3(inOutR[0].slice(2) + inOutR[1].slice(2), { encoding: 'hex' }).slice(2)
        var count = web3.padLeft(web3.toHex(that.zsc.ctr(yHash)).slice(2), 64)
        var hashStruct = web3.sha3(typeHash + yBarHash + outLHash + inLHash + inOutRHash + count, { encoding: 'hex' }).slice(2)
        var message = web3.sha3("1901" + domainHash + hashStruct, { encoding: 'hex' })
        var signature = web3.eth.sign(eth.accounts[0], message).slice(2)
        return ["0x00000000000000000000000000000000000000000000000000000000000000" + signature.slice(128), "0x" + signature.slice(0, 64), "0x" + signature.slice(64, 128)]
    }

    var signBurn = function(value) {
        var domainHash = that.zsc.domainHash().slice(2)
        var typeHash = '9d72b69945fb58354dfc76c7c1408fc89879b343a0105554190526fc4171d455' // keccak256 hash of "ZETHER_BURN_SIGNATURE(uint256 bTransfer,uint256 count)"
        var value = web3.padLeft(web3.toHex(value).slice(2), 64)
        var count = web3.padLeft(web3.toHex(that.zsc.ctr(yHash)).slice(2), 64)
        var hashStruct = web3.sha3(typeHash + value + count, { encoding: 'hex' }).slice(2)
        var message = web3.sha3("1901" + domainHash + hashStruct, { encoding: 'hex' })
        var signature = web3.eth.sign(eth.accounts[0], message).slice(2)
        return ["0x00000000000000000000000000000000000000000000000000000000000000" + signature.slice(128), "0x" + signature.slice(0, 64), "0x" + signature.slice(64, 128)]
    }

    this.me = function() {
        return this.keypair.y
    }

    this.mine = function(address) {
        return address[0] == this.keypair['y'][0] && address[1] == this.keypair['y'][1];
    }

    this.peek = function() { // read-only, incorporates not-yet-rolled-over receipts.
        var acc = [
            [this.zsc.acc(yHash, 0, 0), this.zsc.acc(yHash, 0, 1)],
            [this.zsc.acc(yHash, 1, 0), this.zsc.acc(yHash, 1, 1)]
        ];
        var pTransfers = [
            [this.zsc.pTransfers(yHash, 0, 0), this.zsc.pTransfers(yHash, 0, 1)],
            [this.zsc.pTransfers(yHash, 1, 0), this.zsc.pTransfers(yHash, 1, 1)]
        ];
        var result = [zether.add(acc[0], pTransfers[0]), zether.add(acc[1], pTransfers[1])];
        return zether.readBalance(result[0], result[1], this.keypair['x'], 0, 100000) // hardcoded range...?
    }

    this.deposit = function(value) {
        var peek = this.peek();
        var events = this.zsc.FundOccurred();
        events.watch(function(error, event) {
            if (error) {
                console.log("Error: " + error);
            } else {
                if (that.mine(event.args['funder'])) {
                    console.log("Deposit of " + value + " was successful. Balance is now " + (peek + value) + ".");
                    events.stopWatching();
                }
            }
        });

        this.zsc.fund(this.keypair['y'], value, { from: eth.accounts[0], gas: 5470000 })
        return "Initiating deposit."
    }

    this.transfer = function(yBar, value) {
        var peek = this.peek();
        if (value > this.balance) {
            if (value > peek) {
                throw "Requested transfer amount of " + value + " exceeds available balance of " + peek + "."
            } else {
                var events = this.zsc.RollOverOccurred();
                events.watch(function(error, event) {
                    if (error) {
                        console.log("Error: " + error);
                    } else {
                        if (that.mine(event.args['roller'])) {
                            that.balance = peek;
                            events.stopWatching();
                            that.transfer(yBar, value);
                        }
                    }
                });
                this.zsc.rollOver(this.keypair['y'], { from: eth.accounts[0], gas: 5470000 });
                return "Initiating transfer."
            }
        }
        var acc = [
            [this.zsc.acc(yHash, 0, 0), this.zsc.acc(yHash, 0, 1)],
            [this.zsc.acc(yHash, 1, 0), this.zsc.acc(yHash, 1, 1)]
        ];
        var proof = zether.proveTransfer(acc[0], acc[1], this.keypair['y'], yBar, this.keypair['x'], value, this.balance - value);
        var signature = signTransfer(yBar, proof['outL'], proof['inL'], proof['inOutR'])
        var events = this.zsc.TransferFrom();
        events.watch(function(error, event) {
            if (error) {
                console.log("Error: " + error);
            } else {
                if (that.mine(event.args['sender'])) {
                    that.balance -= value;
                    console.log("Transfer of " + value + " was successful. Balance now " + (peek - value) + ".");
                    events.stopWatching();
                }
            }
        });

        this.zsc.transfer(proof['outL'], proof['inL'], proof['inOutR'], this.keypair['y'], yBar, proof['proof'], signature, { from: eth.accounts[0], gas: 5470000 })
        return "Initiating transfer."
    }

    this.withdraw = function(value) {
        var peek = this.peek(); // for a recursive double-call, this will be wasteful technically...
        if (value > this.balance) {
            if (value > peek) {
                throw "Requested transfer amount of " + value + " exceeds available balance of " + peek + "."
            } else {
                var events = this.zsc.RollOverOccurred();
                events.watch(function(error, event) {
                    if (error) {
                        console.log("Error: " + error);
                    } else {
                        if (that.mine(event.args['roller'])) {
                            that.balance = peek;
                            events.stopWatching();
                            that.withdraw(value);
                        }
                    }
                });
                this.zsc.rollOver(this.keypair['y'], { from: eth.accounts[0], gas: 5470000 });
                return "Initiating withdrawal."
            }
        }
        var acc = [
            [this.zsc.acc(yHash, 0, 0), this.zsc.acc(yHash, 0, 1)],
            [this.zsc.acc(yHash, 1, 0), this.zsc.acc(yHash, 1, 1)]
        ];
        var proof = zether.proveBurn(acc[0], acc[1], this.keypair['y'], value, this.keypair['x'], this.balance - value);
        var signature = signBurn(value)
        var events = this.zsc.BurnOccurred();
        events.watch(function(error, event) {
            if (error) {
                console.log("Error: " + error);
            } else {
                if (that.mine(event.args['burner'])) {
                    that.balance -= value;
                    console.log("Withdrawal of " + value + " was successful. Balance now " + (peek - value) + ".");
                    events.stopWatching();
                }
            }
        });

        this.zsc.burn(this.keypair['y'], value, proof, signature, { from: eth.accounts[0], gas: 5470000 })
        return "Initiating withdrawal."
    }

    this.zsc.fund(this.keypair['y'], 0, { from: eth.accounts[0], gas: 5470000 }) // dummy "registration" deposit
}