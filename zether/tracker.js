/* beautify ignore:start */
var zscContract = web3.eth.contract([{"constant":false,"inputs":[{"name":"y","type":"bytes32[2]"}],"name":"register","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"ethAddrs","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"y","type":"bytes32[2]"},{"name":"bTransfer","type":"uint256"}],"name":"fund","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"epochLength","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"},{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"name":"acc","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"L","type":"bytes32[2][]"},{"name":"R","type":"bytes32[2]"},{"name":"y","type":"bytes32[2][]"},{"name":"u","type":"bytes32[2]"},{"name":"proof","type":"bytes"}],"name":"transfer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"y","type":"bytes32[2]"},{"name":"bTransfer","type":"uint256"},{"name":"u","type":"bytes32[2]"},{"name":"proof","type":"bytes"}],"name":"burn","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"},{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"name":"pTransfers","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"lastRollOver","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_coin","type":"address"},{"name":"_epochLength","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"registerer","type":"bytes32[2]"},{"indexed":false,"name":"addr","type":"address"}],"name":"RegistrationOccurred","type":"event"},{"anonymous":false,"inputs":[],"name":"FundOccurred","type":"event"},{"anonymous":false,"inputs":[],"name":"BurnOccurred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"parties","type":"bytes32[2][]"}],"name":"TransferOccurred","type":"event"}]);
/* beautify ignore:end */

function _deployZSC(_coin) {
    var zsc = zscContract.new(
        _coin,
        5, { // temp epoch length. change later
            from: web3.eth.accounts[0],
            data: '0x6080604052604051620000129062000113565b604051809103906000f0801580156200002f573d6000803e3d6000fd5b50600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060035560006009553480156200008757600080fd5b506040516040806200293083398101806040526040811015620000a957600080fd5b810190808051906020019092919080519060200190929190505050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600281905550505062000121565b610530806200240083390190565b6122cf80620001316000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80635b7f82f4116100665780635b7f82f41461018a5780635ec7ccfd146101e057806373663b5f146104bd57806380a2537314610554578063b1537596146105aa57610093565b806337f0d6461461009857806342b30cd6146100c65780635464befb1461013457806357d775f81461016c575b600080fd5b6100c4600480360360408110156100ae57600080fd5b81019080806040019091929192905050506105ec565b005b6100f2600480360360208110156100dc57600080fd5b8101908080359060200190929190505050610675565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61016a6004803603606081101561014a57600080fd5b8101908080604001909192919290803590602001909291905050506106a8565b005b610174610afe565b6040518082815260200191505060405180910390f35b6101ca600480360360608110156101a057600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050610b04565b6040518082815260200191505060405180910390f35b6104bb600480360360e08110156101f657600080fd5b810190808035906020019064010000000081111561021357600080fd5b82018360208201111561022557600080fd5b8035906020019184604083028401116401000000008311171561024757600080fd5b9190808060200260200160405190810160405280939291908181526020016000905b828210156102c0578484839050604002016002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505081526020019060010190610269565b5050505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505091929192908035906020019064010000000081111561032457600080fd5b82018360208201111561033657600080fd5b8035906020019184604083028401116401000000008311171561035857600080fd5b9190808060200260200160405190810160405280939291908181526020016000905b828210156103d1578484839050604002016002806020026040519081016040528092919082600260200280828437600081840152601f19601f8201169050808301925050505050508152602001906001019061037a565b5050505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505091929192908035906020019064010000000081111561043557600080fd5b82018360208201111561044757600080fd5b8035906020019184600183028401116401000000008311171561046957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610b3d565b005b610552600480360360c08110156104d357600080fd5b810190808060400190919291929080359060200190929190806040019091929192908035906020019064010000000081111561050e57600080fd5b82018360208201111561052057600080fd5b8035906020019184600183028401116401000000008311171561054257600080fd5b909192939192939050505061149d565b005b6105946004803603606081101561056a57600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050611cb6565b6040518082815260200191505060405180910390f35b6105d6600480360360208110156105c057600080fd5b8101908080359060200190929190505050611cef565b6040518082815260200191505060405180910390f35b7f437ea94f7591d30405a303f591ec44526f8d1088ef0377db412ec178b73e084981336040518083600260200280828437600081840152601f19601f8201169050808301925050508273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a150565b60066020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000826040516020018082600260200280828437808301925050509150506040516020818303038152906040528051906020012090506106e781611d07565b63ffffffff8211151515610763576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4465706f73697420616d6f756e74206f7574206f662072616e67652e0000000081525060200191505060405180910390fd5b63ffffffff6003548301111515156107c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806122596028913960400191505060405180910390fd5b6107ce611fda565b6004600083815260200190815260200160002060006002811015156107ef57fe5b6002020160028060200260405190810160405280929190826002801561082a576020028201915b815481526020019060010190808311610816575b50505050509050604051600182518252602083015160208301527f077da99d806abd13c9f15ece5398525119d11e11e9836b2ee7d23f6159ad87d460408301527f01485efa927f2ad41bff567eec88f32fb0a0f706588b4e41a8d587d008b7f87560608301528460808301526040808301606060408501600060075af181169050604083608084600060065af1811690508015156108c757600080fd5b5050806004600084815260200190815260200160002060006002811015156108eb57fe5b600202019060026108fd929190611ffc565b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd6006600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1630866040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015610a0d57600080fd5b505af1158015610a21573d6000803e3d6000fd5b505050506040513d6020811015610a3757600080fd5b81019080805190602001909291905050501515610abc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f5472616e736665722066726f6d2073656e646572206661696c6564000000000081525060200191505060405180910390fd5b826003600082825401925050819055507ffca166bc9d2eded480543aa840c7dfc8e7e7027d84512a4f77defc0d3bbbc30160405160405180910390a150505050565b60025481565b600460205282600052604060002082600281101515610b1f57fe5b6002020181600281101515610b3057fe5b0160009250925050505481565b600083519050606081604051908082528060200260200182016040528015610b7f57816020015b610b6c61203c565b815260200190600190039081610b645790505b509050606082604051908082528060200260200182016040528015610bbe57816020015b610bab61203c565b815260200190600190039081610ba35790505b509050828851141515610c39576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f496e707574206172726179206c656e677468206d69736d61746368210000000081525060200191505060405180910390fd5b60006001905060008090505b8751811015610ed05760008882815181101515610c5e57fe5b906020019060200201516040516020018082600260200280838360005b83811015610c96578082015181840152602081019050610c7b565b50505050905001915050604051602081830303815290604052805190602001209050610cc181611d07565b610cc961205e565b60056000838152602001908152602001600020600280602002604051908101604052809291906000905b82821015610d4c57838260020201600280602002604051908101604052809291908260028015610d38576020028201915b815481526020019060010190808311610d24575b505050505081526020019060010190610cf3565b50505050905060405181515181526020825101516020820152604080850261010401604083013760408251608083600060065af18516945060208201515181526020808301510151602082015260406024604083013760406020830151608083600060065af185169450508060056000848152602001908152602001600020906002610dd992919061208b565b5060046000838152602001908152602001600020600280602002604051908101604052809291906000905b82821015610e5d57838260020201600280602002604051908101604052809291908260028015610e49576020028201915b815481526020019060010190808311610e35575b505050505081526020019060010190610e04565b505050509050806000600281101515610e7257fe5b60200201518684815181101515610e8557fe5b90602001906020020181905250806001600281101515610ea157fe5b60200201518584815181101515610eb457fe5b9060200190602002018190525050508080600101915050610c45565b50600181141515610f2c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001806121f7602e913960400191505060405180910390fd5b60008090506000876040516020018082600260200280838360005b83811015610f62578082015181840152602081019050610f47565b5050505090500191505060405160208183030381529060405280519060200120905060008090505b600880549050811015610fce5781600882815481101515610fa757fe5b90600052602060002001541415610fc15760019250610fce565b8080600101915050610f8a565b5081151515611045576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4e6f6e636520616c7265616479207365656e210000000000000000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631659e67d86868e8e8e6009548f8f6040518963ffffffff1660e01b81526004018080602001806020018060200189600260200280838360005b838110156110d35780820151818401526020810190506110b8565b505050509050018060200188815260200187600260200280838360005b8381101561110b5780820151818401526020810190506110f0565b505050509050018060200186810386528e8181518152602001915080516000925b8184101561117757828490602001906020020151600260200280838360005b8381101561116657808201518184015260208101905061114b565b50505050905001926001019261112c565b9250505086810385528d8181518152602001915080516000925b818410156111dc57828490602001906020020151600260200280838360005b838110156111cb5780820151818401526020810190506111b0565b505050509050019260010192611191565b9250505086810384528c8181518152602001915080516000925b8184101561124157828490602001906020020151600260200280838360005b83811015611230578082015181840152602081019050611215565b5050505090500192600101926111f6565b9250505086810383528a8181518152602001915080516000925b818410156112a657828490602001906020020151600260200280838360005b8381101561129557808201518184015260208101905061127a565b50505050905001926001019261125b565b92505050868103825287818151815260200191508051906020019080838360005b838110156112e25780820151818401526020810190506112c7565b50505050905090810190601f16801561130f5780820380516001836020036101000a031916815260200191505b509d505050505050505050505050505060206040518083038186803b15801561133757600080fd5b505afa15801561134b573d6000803e3d6000fd5b505050506040513d602081101561136157600080fd5b810190808051906020019092919050505015156113c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806122816023913960400191505060405180910390fd5b60088190806001815401808255809150509060018203906000526020600020016000909192909190915055507f4ef6ed22b1551aeadeb80e67bb3a38788491e81527cc70a85bff611e9e51e18a8960405180806020018281038252838181518152602001915080516000925b8184101561148057828490602001906020020151600260200280838360005b8381101561146f578082015181840152602081019050611454565b505050509050019260010192611435565b925050509250505060405180910390a15050505050505050505050565b6000856040516020018082600260200280828437808301925050509150506040516020818303038152906040528051906020012090506114dc81611d07565b600073ffffffffffffffffffffffffffffffffffffffff166006600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156115b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f556e72656769737465726564206163636f756e7421000000000000000000000081525060200191505060405180910390fd5b846000111580156115c9575063ffffffff8511155b151561163d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f5472616e7366657220616d6f756e74206f7574206f662072616e67650000000081525060200191505060405180910390fd5b61164561205e565b60046000838152602001908152602001600020600280602002604051908101604052809291906000905b828210156116c8578382600202016002806020026040519081016040528092919082600280156116b4576020028201915b8154815260200190600101908083116116a0575b50505050508152602001906001019061166f565b5050505090506001604051825151815260208351015160208201527f077da99d806abd13c9f15ece5398525119d11e11e9836b2ee7d23f6159ad87d460408201527f01485efa927f2ad41bff567eec88f32fb0a0f706588b4e41a8d587d008b7f8756060820152877f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010360808201526040808201606060408401600060075af18216915060408351608083600060065af18216915081151561178957600080fd5b5050600080905060008660405160200180826002602002808284378083019250505091505060405160208183030381529060405280519060200120905060008090505b60088054905081101561181057816008828154811015156117e957fe5b906000526020600020015414156118035760019250611810565b80806001019150506117cc565b5081151515611887576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4e6f6e636520616c7265616479207365656e210000000000000000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d79e84138460006002811015156118d457fe5b60200201518560016002811015156118e857fe5b60200201518c8c6009548d8d8d6040518963ffffffff1660e01b81526004018089600260200280838360005b8381101561192f578082015181840152602081019050611914565b5050505090500188600260200280838360005b8381101561195d578082015181840152602081019050611942565b5050505090500187600260200280828437600081840152601f19601f82011690508083019250505086815260200185815260200184600260200280828437600081840152601f19601f820116905080830192505050806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050995050505050505050505060206040518083038186803b158015611a0457600080fd5b505afa158015611a18573d6000803e3d6000fd5b505050506040513d6020811015611a2e57600080fd5b81019080805190602001909291905050501515611ab3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f4275726e2070726f6f6620766572696669636174696f6e206661696c6564210081525060200191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6006600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168a6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611b8e57600080fd5b505af1158015611ba2573d6000803e3d6000fd5b505050506040513d6020811015611bb857600080fd5b81019080805190602001909291905050501515611c20576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001806122256034913960400191505060405180910390fd5b8260046000868152602001908152602001600020906002611c4292919061208b565b508760036000828254039250508190555060088190806001815401808255809150509060018203906000526020600020016000909192909190915055507f40456e504254d84bf7f94f9976a7bf3b49907c184aa8097866e004497dcfe65b60405160405180910390a1505050505050505050565b600560205282600052604060002082600281101515611cd157fe5b6002020181600281101515611ce257fe5b0160009250925050505481565b60076020528060005260406000206000915090505481565b600060025443811515611d1657fe5b0490508060076000848152602001908152602001600020541015611fb657611d3c6120db565b604051806040016040528060046000868152602001908152602001600020600280602002604051908101604052809291906000905b82821015611dca57838260020201600280602002604051908101604052809291908260028015611db6576020028201915b815481526020019060010190808311611da2575b505050505081526020019060010190611d71565b50505050815260200160056000868152602001908152602001600020600280602002604051908101604052809291906000905b82821015611e5657838260020201600280602002604051908101604052809291908260028015611e42576020028201915b815481526020019060010190808311611e2e575b505050505081526020019060010190611dfd565b505050508152509050600160405182515151815260208351510151602082015260208301515151604082015260208084015151015160608201526040835151608083600060065af1821691506020835101515181526020808451015101516020820152602080840151015151604082015260208060208501510151015160608201526040602084510151608083600060605af182169150811515611ef957600080fd5b5050806000600281101515611f0a57fe5b602002015160046000858152602001908152602001600020906002611f3092919061208b565b50604051806040016040528060405180604001604052806000801b81526020016000801b815250815260200160405180604001604052806000801b81526020016000801b81525081525060056000858152602001908152602001600020906002611f9b92919061208b565b50816007600085815260200190815260200160002081905550505b806009541015611fd6578060098190555060086000611fd59190612109565b5b5050565b6040518060400160405280600290602082028038833980820191505090505090565b826002810192821561202b579160200282015b8281111561202a57825182559160200191906001019061200f565b5b509050612038919061212a565b5090565b6040518060400160405280600290602082028038833980820191505090505090565b60405180608001604052806002905b61207561203c565b81526020019060019003908161206d5790505090565b826002800281019282156120ca579160200282015b828111156120c9578251829060026120b992919061214f565b50916020019190600201906120a0565b5b5090506120d7919061218f565b5090565b6040518061010001604052806002905b6120f36121bb565b8152602001906001900390816120eb5790505090565b5080546000825590600052602060002090810190612127919061212a565b50565b61214c91905b80821115612148576000816000905550600101612130565b5090565b90565b826002810192821561217e579160200282015b8281111561217d578251825591602001919060010190612162565b5b50905061218b919061212a565b5090565b6121b891905b808211156121b457600081816121ab91906121e8565b50600201612195565b5090565b90565b60405180608001604052806002905b6121d261203c565b8152602001906001900390816121ca5790505090565b50600081556001016000905556fe456c6c6970746963206375727665206f7065726174696f6e73206661696c7572652e2042616420706f696e74733f546869732073686f756c646e2774206661696c2e2e2e20536f6d657468696e672077656e74207365766572656c792077726f6e6746756e642070757368657320636f6e74726163742070617374206d6178696d756d2076616c75652e5472616e736665722070726f6f6620766572696669636174696f6e206661696c656421a165627a7a72305820765a36e41bf020db4ea55555ce105bfaffa43feba668d3621fdf864fc575b81e0029608060405234801561001057600080fd5b50610510806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80631659e67d1461003b578063d79e84131461023f575b600080fd5b610225600480360361014081101561005257600080fd5b810190808035906020019064010000000081111561006f57600080fd5b82018360208201111561008157600080fd5b803590602001918460408302840111640100000000831117156100a357600080fd5b9091929391929390803590602001906401000000008111156100c457600080fd5b8201836020820111156100d657600080fd5b803590602001918460408302840111640100000000831117156100f857600080fd5b90919293919293908035906020019064010000000081111561011957600080fd5b82018360208201111561012b57600080fd5b8035906020019184604083028401116401000000008311171561014d57600080fd5b9091929391929390806040019091929192908035906020019064010000000081111561017857600080fd5b82018360208201111561018a57600080fd5b803590602001918460408302840111640100000000831117156101ac57600080fd5b90919293919293908035906020019092919080604001909192919290803590602001906401000000008111156101e157600080fd5b8201836020820111156101f357600080fd5b8035906020019184600183028401116401000000008311171561021557600080fd5b909192939192939050505061030d565b604051808215151515815260200191505060405180910390f35b6102f3600480360361016081101561025657600080fd5b81019080806040019091929192908060400190919291929080604001909192919290803590602001909291908035906020019092919080604001909192919290803590602001906401000000008111156102af57600080fd5b8201836020820111156102c157600080fd5b803590602001918460018302840111640100000000831117156102e357600080fd5b90919293919293905050506103fb565b604051808215151515815260200191505060405180910390f35b6000806060600973ffffffffffffffffffffffffffffffffffffffff16600036604051808383808284378083019250505092505050600060405180830381855afa9150503d806000811461037d576040519150601f19603f3d011682016040523d82523d6000602084013e610382565b606091505b50915091508180156103d35750600160f81b81601f8151811015156103a357fe5b90602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b156103e3576001925050506103ea565b6000925050505b9d9c50505050505050505050505050565b6000806060600a73ffffffffffffffffffffffffffffffffffffffff16600036604051808383808284378083019250505092505050600060405180830381855afa9150503d806000811461046b576040519150601f19603f3d011682016040523d82523d6000602084013e610470565b606091505b50915091508180156104c15750600160f81b81601f81518110151561049157fe5b90602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b156104d1576001925050506104d8565b6000925050505b9897505050505050505056fea165627a7a723058202ffdbd219bcb75c2f30daaa48c647e347cc90111647b8161dd04afa7f8ae73820029',
            gas: '4700000'
        },
        function(e, contract) {
            console.log(e, contract);
            if (typeof contract.address !== 'undefined') {
                console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
            }
        })
    return zsc;
}

function _recoverZSC(address) {
    var zsc = zscContract.at(address);
    return zsc;
}

var demo = (function() {
    return {
        deployZSC: function(coin) {
            return _deployZSC(coin);
        },
        recoverZSC: function(address) {
            return _recoverZSC(address);
        },
    };
})();


function tracker(zsc) {
    var that = this;

    var zsc = zsc;
    var keypair = zether.createAccount(); // private
    var yHash = web3.sha3(keypair['y'][0].slice(2) + keypair['y'][1].slice(2), { encoding: 'hex' });
    var friends = {};
    var epochLength = zsc.epochLength();
    var lastRollOver = 0; // would it make sense to just pull this directly every time...?!

    var state = function() {
        this.available = 0; // reflects WOULD-BE value in acc (i.e., if rollOver were called). do not touch this manually
        this.pending = 0; // represents an estimate of pTransfers alone. this is used to speed up peeking when transfers are received
        this.nonceUsed = false;
    }
    this.state = new state();
    this.state.acc = [
        keypair['y'],
        ['0x077da99d806abd13c9f15ece5398525119d11e11e9836b2ee7d23f6159ad87d4', '0x01485efa927f2ad41bff567eec88f32fb0a0f706588b4e41a8d587d008b7f875']
    ];
    var currentEpoch = function() { return Math.floor(eth.blockNumber / epochLength); }

    var match = function(address, candidate) {
        return address[0] == candidate[0] && address[1] == candidate[1];
    } // consider refactoring / eliminating this, e.g. using JSON.stringify

    var simulateRollOver = function(address) { // "baby" version of the below which will be used for _foreign_ accounts.
        var yHash = web3.sha3(address[0].slice(2) + address[1].slice(2), { encoding: 'hex' });
        var state = new state();
        state.acc = [
            [zsc.acc(yHash, 0, 0), zsc.acc(yHash, 0, 1)],
            [zsc.acc(yHash, 1, 0), zsc.acc(yHash, 1, 1)]
        ];
        if (zsc.lastRollOver(yHash) < currentEpoch()) {
            var pTransfers = [
                [zsc.pending(yHash, 0, 0), zsc.pending(yHash, 0, 1)],
                [zsc.pending(yHash, 1, 0), zsc.pending(yHash, 1, 1)]
            ];
            state.acc = zether.add(acc, pTransfers);
        }
    }

    this.simulateRollOver = function() {
        var updated = new state();
        updated.acc = this.state.acc.slice(); // copy
        updated.available = this.state.available;
        updated.pending = this.state.pending;
        updated.nonceUsed = this.state.nonceUsed;

        if (lastRollOver < currentEpoch()) {
            var pTransfers = [
                [zsc.pTransfers(yHash, 0, 0), zsc.pTransfers(yHash, 0, 1)],
                [zsc.pTransfers(yHash, 1, 0), zsc.pTransfers(yHash, 1, 1)]
            ];
            updated.acc = zether.add(acc, pTransfers);
            updated.available += updated.pending;
            updated.pending = 0;
            updated.nonceUsed = false; // only so that this can
        }
        return updated;
    }
    this.confirmRollOver = function(state) { // not sure this will be ultimately necessary
        this.state = state;
        lastRollOver = currentEpoch();
    }

    zsc.TransferOccurred(function(error, event) { // automatically watch for incoming transfers
        if (error) {
            console.log("Error: " + error);
        } else {
            for (var party in event.args['parties']) {
                if (that.mine(party)) {
                    that.confirmRollOver(that.simulateRollOver());
                    if (that.check()) // if rollOver happens remotely, will mimic it locally, and start from 0
                        console.log("Transfer received! New balance is " + (that.available + that.pending) + ".");
                    // interesting: impossible even to know who sent you funds.
                    // could always report back msg.sender, but that means nothing basically. can always send from different eth address
                    break;
                }
            }
        }
    });

    // todo: add a way to generate throwaway addresses (for receiving), as well as to consolidate throwaways.

    this.me = function() {
        return keypair.y
    }

    this.secret = function() {
        return keypair.x;
    }

    this.mine = function(address) { // only used by callbacks...
        return match(address, keypair['y']);
    }

    this.friend = function(name, address) {
        friends[name] = address;
        return "Friend added.";
    }

    this.check = function() { // returns: did my balance rise?
        var pTransfers = this.pending;
        var pTransfers = [
            [zsc.pending(yHash, 0, 0), zsc.pending(yHash, 0, 1)],
            [zsc.pending(yHash, 1, 0), zsc.pending(yHash, 1, 1)]
        ];
        this.pending = zether.readBalance(pTransfers[0], pTransfers[1], keypair['x'], this.pending, 4294967295);
        return this.pending > pTransfers; // just a shortcut
    }

    this.deposit = function(value) {
        var events = zsc.FundOccurred();
        var timer = setTimeout(function() {
            events.stopWatching();
            console.log("Deposit failed...")
        }, 5000);
        zsc.fund(keypair['y'], value, { from: eth.accounts[0], gas: 5470000 }, function(error, txHash) {
            if (error) {
                console.log("Error: " + error);
            } else {
                events.watch(function(error, event) {
                    if (error) {
                        console.log("Error: " + error);
                    } else if (txHash == event.transactionHash) {
                        clearTimeout(timer);
                        state.acc = zether.adjust(value, state.acc)
                        that.state.available += value;
                        console.log("Deposit of " + value + " was successful. Balance is now " + (that.state.available + that.state.pending) + ".");
                        events.stopWatching();
                    }
                });
            }
        });
        return "Initiating deposit.";
    }

    this.transfer = function(name, decoys, value) { // assuming the names of the other people in the anonymity set are being provided?
        var state = this.simulateRollOver();
        if (value > state.available) {
            if (value > state.available + state.pending)
                throw "Requested transfer amount of " + value + " exceeds account balance of " + (state.available + state.pending) + ".";
            else
                throw "Requested transfer amount of " + value + " exceeds presently available balance of " + state.available + ". Please wait until the next rollover (" + (Math.ceil(eth.blockNumber / epochLength) * epochLength - eth.blockNumber) + " blocks away), at which point you'll have " + (state.available + state.pending) + " available.";
        }

        var CL = [];
        var CR = [];
        var y = decoys.concat(this.me()).concat(friends[name]); // not yet shuffled

        var index = [];
        var m = y.length;
        while (m != 0) { // https://bost.ocks.org/mike/shuffle/
            var i = Math.floor(Math.random() * m--);
            var temp = y[i];
            y[i] = y[m];
            y[m] = temp;
            if (this.mine(temp))
                index[0] = m;
            else if (match(temp, friends[name]))
                index[1] = m;
        } // shuffle the array of y's
        if (index[0] % 2 == index[1] % 2) {
            var temp = y[index[1]];
            y[index[1]] = y[index[1] + (index[1] % 2 == 0 ? 1 : -1)];
            y[index[1] + (index[1] % 2 == 0 ? 1 : -1)] = temp;
            index[1] = index[1] + (index[1] % 2 == 0 ? 1 : -1);
        } // make sure you and your friend have opposite parity

        for (var address in y) { // could use an array.map if i had a better javascript shell.
            var state = simulateRollOver(address);
            CL.push(state.acc[0]);
            CR.push(state.acc[1]);
        }

        var proof = zether.proveTransfer(CL, CR, y, currentEpoch(), keypair['x'], value, state.available - value);
        var events = zsc.TransferOccurred();
        var timer = setTimeout(function() {
            events.stopWatching();
            console.log("Transfer failed...")
        }, 5000);
        zsc.transfer(CL, CR, y, proof['u'], proof['proof'], { from: eth.accounts[0], gas: 5470000 }, function(error, txHash) {
            if (error) {
                console.log("Error: " + error);
            } else {
                events.watch(function(error, event) {
                    // console.log("TransferOccurred event captured")
                    if (error) {
                        console.log("Error: " + error);
                    } else if (txHash == event.transactionHash) {
                        clearTimeout(timer);
                        state.nonceUsed = true;
                        state.pending -= value; // urgent: pending could become NEGATIVE??? might need to adjust readBalance to allow for negative start of range
                        that.confirmRollOver(state);
                        console.log("Transfer of " + value + " was successful. Balance now " + (state.available + state.pending) + ".");
                        events.stopWatching();
                    }
                });
            }
        });
        return "Initiating transfer.";
    }

    this.withdraw = function(value) {
        var state = this.simulateRollOver();
        if (value > state.available) {
            if (value > state.available + state.pending)
                throw "Requested transfer amount of " + value + " exceeds account balance of " + (state.available + state.pending) + ".";
            else
                throw "Requested transfer amount of " + value + " exceeds presently available balance of " + state.available + ". Please wait until the next rollover (" + (Math.ceil(eth.blockNumber / epochLength) * epochLength - eth.blockNumber) + " blocks away), at which point you'll have " + (state.available + state.pending) + " available.";
        }
        if (state.nonceUsed)
            throw "You've already made a withdrawal/transfer during this epoch! Please wait till the next one, " + (Math.ceil(eth.blockNumber / epochLength) * epochLength - eth.blockNumber) + " blocks away.";
        var proof = zether.proveBurn(state.acc[0], state.acc[1], keypair['y'], value, currentEpoch(), keypair['x'], state.available - value);
        var events = zsc.BurnOccurred();
        var timer = setTimeout(function() {
            events.stopWatching();
            console.log("Withdrawal failed...")
        }, 5000);
        zsc.burn(keypair['y'], value, proof['u'], proof['proof'], { from: eth.accounts[0], gas: 5470000 }, function(error, txHash) {
            if (error) {
                console.log("Error: " + error);
            } else {
                events.watch(function(error, event) {
                    if (error) {
                        console.log("Error: " + error);
                    } else if (txHash == event.transactionHash) {
                        clearTimeout(timer);
                        state.acc = zether.adjust(-value, state.acc)
                        state.available -= value;
                        state.nonceUsed = true; // or: after confirming, that.state.nonceUsed = true.
                        that.confirmRollOver(state);
                        console.log("Withdrawal of " + value + " was successful. Balance now " + (state.available + state.pending) + ".");
                        events.stopWatching();
                    }
                });
            }
        });
        return "Initiating withdrawal.";
    }

    var register = zsc.RegistrationOccurred();
    var timer = setTimeout(function() {
        register.stopWatching();
        console.log("Initial registration failed...!")
    }, 5000);
    register.watch(function(error, event) {
        if (error) {
            console.log("Error: " + error);
        } else if (that.mine(event.args['registerer'])) {
            clearTimeout(timer);
            if (event.args['addr'] != eth.accounts[0]) {
                console.log("Registration process compromised! Create a new tracker and do not use this one.");
            } else {
                console.log("Initial registration successful.");
            }
            register.stopWatching();
        }
    });
    zsc.register(keypair['y'], { from: eth.accounts[0], gas: 5470000 });
}