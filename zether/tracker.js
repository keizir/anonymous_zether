/* beautify ignore:start */
var zscContract = web3.eth.contract([{"constant":false,"inputs":[{"name":"y","type":"bytes32[2]"}],"name":"register","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"ethAddrs","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"y","type":"bytes32[2]"},{"name":"bTransfer","type":"uint256"}],"name":"fund","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"epochLength","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"},{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"name":"acc","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"L","type":"bytes32[2][]"},{"name":"R","type":"bytes32[2]"},{"name":"y","type":"bytes32[2][]"},{"name":"u","type":"bytes32[2]"},{"name":"proof","type":"bytes"}],"name":"transfer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"y","type":"bytes32[2]"},{"name":"bTransfer","type":"uint256"},{"name":"u","type":"bytes32[2]"},{"name":"proof","type":"bytes"}],"name":"burn","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"},{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"name":"pTransfers","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"lastRollOver","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_coin","type":"address"},{"name":"_epochLength","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"registerer","type":"bytes32[2]"},{"indexed":false,"name":"addr","type":"address"}],"name":"RegistrationOccurred","type":"event"},{"anonymous":false,"inputs":[],"name":"FundOccurred","type":"event"},{"anonymous":false,"inputs":[],"name":"BurnOccurred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"parties","type":"bytes32[2][]"}],"name":"TransferOccurred","type":"event"}]);
/* beautify ignore:end */

var _epochLength = 1;

function _deployZSC(_coin) {
    var zsc = zscContract.new(
        _coin,
        _epochLength, {
            from: web3.eth.accounts[0],
            data: '0x6080604052604051620000129062000113565b604051809103906000f0801580156200002f573d6000803e3d6000fd5b50600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060035560006009553480156200008757600080fd5b5060405160408062002ea383398101806040526040811015620000a957600080fd5b810190808051906020019092919080519060200190929190505050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600281905550505062000121565b610609806200289a83390190565b61276980620001316000396000f3fe608060405234801561001057600080fd5b50600436106100b0576000357c0100000000000000000000000000000000000000000000000000000000900480635b7f82f4116100835780635b7f82f4146101a75780635ec7ccfd146101fd57806373663b5f146104da57806380a2537314610621578063b153759614610677576100b0565b806337f0d646146100b557806342b30cd6146100e35780635464befb1461015157806357d775f814610189575b600080fd5b6100e1600480360360408110156100cb57600080fd5b81019080806040019091929192905050506106b9565b005b61010f600480360360208110156100f957600080fd5b81019080803590602001909291905050506109f0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101876004803603606081101561016757600080fd5b810190808060400190919291929080359060200190929190505050610a23565b005b610191610e95565b6040518082815260200191505060405180910390f35b6101e7600480360360608110156101bd57600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050610e9b565b6040518082815260200191505060405180910390f35b6104d8600480360360e081101561021357600080fd5b810190808035906020019064010000000081111561023057600080fd5b82018360208201111561024257600080fd5b8035906020019184604083028401116401000000008311171561026457600080fd5b9190808060200260200160405190810160405280939291908181526020016000905b828210156102dd578484839050604002016002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505081526020019060010190610286565b5050505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505091929192908035906020019064010000000081111561034157600080fd5b82018360208201111561035357600080fd5b8035906020019184604083028401116401000000008311171561037557600080fd5b9190808060200260200160405190810160405280939291908181526020016000905b828210156103ee578484839050604002016002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505081526020019060010190610397565b5050505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505091929192908035906020019064010000000081111561045257600080fd5b82018360208201111561046457600080fd5b8035906020019184600183028401116401000000008311171561048657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610ed4565b005b61061f600480360360c08110156104f057600080fd5b8101908080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505091929192908035906020019092919080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505091929192908035906020019064010000000081111561059957600080fd5b8201836020820111156105ab57600080fd5b803590602001918460018302840111640100000000831117156105cd57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061186c565b005b6106616004803603606081101561063757600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050612149565b6040518082815260200191505060405180910390f35b6106a36004803603602081101561068d57600080fd5b8101908080359060200190929190505050612182565b6040518082815260200191505060405180910390f35b6000816040516020018082600260200280828437808301925050509150506040516020818303038152906040528051906020012090506106f7612471565b60046000838152602001908152602001600020600280602002604051908101604052809291906000905b8282101561077a57838260020201600280602002604051908101604052809291908260028015610766576020028201915b815481526020019060010190808311610752575b505050505081526020019060010190610721565b505050509050600060010281600160028110151561079457fe5b602002015160016002811015156107a757fe5b60200201518260016002811015156107bb57fe5b602002015160006002811015156107ce57fe5b60200201518360006002811015156107e257fe5b602002015160016002811015156107f557fe5b602002015184600060028110151561080957fe5b6020020151600060028110151561081c57fe5b6020020151171717141515610899576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4163636f756e7420616c726561647920726567697374657265642e000000000081525060200191505060405180910390fd5b336006600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604060048251377f077da99d806abd13c9f15ece5398525119d11e11e9836b2ee7d23f6159ad87d46020820151527f01485efa927f2ad41bff567eec88f32fb0a0f706588b4e41a8d587d008b7f8756020808301510152806004600084815260200190815260200160002090600261096492919061249f565b507f437ea94f7591d30405a303f591ec44526f8d1088ef0377db412ec178b73e084983336040518083600260200280828437600081840152601f19601f8201169050808301925050508273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1505050565b60066020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600082604051602001808260026020028082843780830192505050915050604051602081830303815290604052805190602001209050610a628161219a565b63ffffffff8211151515610ade576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4465706f73697420616d6f756e74206f7574206f662072616e67652e0000000081525060200191505060405180910390fd5b63ffffffff600354830111151515610b41576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806126f36028913960400191505060405180910390fd5b610b496124ef565b600460008381526020019081526020016000206000600281101515610b6a57fe5b60020201600280602002604051908101604052809291908260028015610ba5576020028201915b815481526020019060010190808311610b91575b50505050509050604051600182518252602083015160208301527f077da99d806abd13c9f15ece5398525119d11e11e9836b2ee7d23f6159ad87d460408301527f01485efa927f2ad41bff567eec88f32fb0a0f706588b4e41a8d587d008b7f87560608301528460808301526040808301606060408501600060075af181169050604083608084600060065af181169050801515610c4257600080fd5b505080600460008481526020019081526020016000206000600281101515610c6657fe5b60020201906002610c78929190612511565b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd6006600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1630866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015610da457600080fd5b505af1158015610db8573d6000803e3d6000fd5b505050506040513d6020811015610dce57600080fd5b81019080805190602001909291905050501515610e53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f5472616e736665722066726f6d2073656e646572206661696c6564000000000081525060200191505060405180910390fd5b826003600082825401925050819055507ffca166bc9d2eded480543aa840c7dfc8e7e7027d84512a4f77defc0d3bbbc30160405160405180910390a150505050565b60025481565b600460205282600052604060002082600281101515610eb657fe5b6002020181600281101515610ec757fe5b0160009250925050505481565b600083519050606081604051908082528060200260200182016040528015610f1657816020015b610f03612551565b815260200190600190039081610efb5790505b509050606082604051908082528060200260200182016040528015610f5557816020015b610f42612551565b815260200190600190039081610f3a5790505b509050828851141515610fd0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f496e707574206172726179206c656e677468206d69736d61746368210000000081525060200191505060405180910390fd5b60006001905060008090505b87518110156112835760008882815181101515610ff557fe5b906020019060200201516040516020018082600260200280838360005b8381101561102d578082015181840152602081019050611012565b505050509050019150506040516020818303038152906040528051906020012090506110588161219a565b611060612471565b60056000838152602001908152602001600020600280602002604051908101604052809291906000905b828210156110e3578382600202016002806020026040519081016040528092919082600280156110cf576020028201915b8154815260200190600101908083116110bb575b50505050508152602001906001019061108a565b505050509050604051815151815260208251015160208201526020840260208e010151516040820152602080850260208f0101510151606082015260408251608083600060065af1851694506020820151518152602080830151015160208201528b51604082015260208c0151606082015260406020830151608083600060065af18516945050806005600084815260200190815260200160002090600261118c92919061249f565b5060046000838152602001908152602001600020600280602002604051908101604052809291906000905b82821015611210578382600202016002806020026040519081016040528092919082600280156111fc576020028201915b8154815260200190600101908083116111e8575b5050505050815260200190600101906111b7565b50505050905080600060028110151561122557fe5b6020020151868481518110151561123857fe5b9060200190602002018190525080600160028110151561125457fe5b6020020151858481518110151561126757fe5b9060200190602002018190525050508080600101915050610fdc565b506001811415156112df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180612691602e913960400191505060405180910390fd5b60008090506000876040516020018082600260200280838360005b838110156113155780820151818401526020810190506112fa565b5050505090500191505060405160208183030381529060405280519060200120905060008090505b600880549050811015611381578160088281548110151561135a57fe5b906000526020600020015414156113745760019250611381565b808060010191505061133d565b50811515156113f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4e6f6e636520616c7265616479207365656e210000000000000000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631659e67d86868e8e8e6009548f8f6040518963ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018060200189600260200280838360005b838110156114a2578082015181840152602081019050611487565b505050509050018060200188815260200187600260200280838360005b838110156114da5780820151818401526020810190506114bf565b505050509050018060200186810386528e8181518152602001915080516000925b8184101561154657828490602001906020020151600260200280838360005b8381101561153557808201518184015260208101905061151a565b5050505090500192600101926114fb565b9250505086810385528d8181518152602001915080516000925b818410156115ab57828490602001906020020151600260200280838360005b8381101561159a57808201518184015260208101905061157f565b505050509050019260010192611560565b9250505086810384528c8181518152602001915080516000925b8184101561161057828490602001906020020151600260200280838360005b838110156115ff5780820151818401526020810190506115e4565b5050505090500192600101926115c5565b9250505086810383528a8181518152602001915080516000925b8184101561167557828490602001906020020151600260200280838360005b83811015611664578082015181840152602081019050611649565b50505050905001926001019261162a565b92505050868103825287818151815260200191508051906020019080838360005b838110156116b1578082015181840152602081019050611696565b50505050905090810190601f1680156116de5780820380516001836020036101000a031916815260200191505b509d505050505050505050505050505060206040518083038186803b15801561170657600080fd5b505afa15801561171a573d6000803e3d6000fd5b505050506040513d602081101561173057600080fd5b81019080805190602001909291905050501515611798576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602381526020018061271b6023913960400191505060405180910390fd5b60088190806001815401808255809150509060018203906000526020600020016000909192909190915055507f4ef6ed22b1551aeadeb80e67bb3a38788491e81527cc70a85bff611e9e51e18a8960405180806020018281038252838181518152602001915080516000925b8184101561184f57828490602001906020020151600260200280838360005b8381101561183e578082015181840152602081019050611823565b505050509050019260010192611804565b925050509250505060405180910390a15050505050505050505050565b6000846040516020018082600260200280838360005b8381101561189d578082015181840152602081019050611882565b505050509050019150506040516020818303038152906040528051906020012090506118c88161219a565b600073ffffffffffffffffffffffffffffffffffffffff166006600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156119a0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f556e72656769737465726564206163636f756e7421000000000000000000000081525060200191505060405180910390fd5b836000111580156119b5575063ffffffff8411155b1515611a29576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f5472616e7366657220616d6f756e74206f7574206f662072616e67650000000081525060200191505060405180910390fd5b611a31612471565b60046000838152602001908152602001600020600280602002604051908101604052809291906000905b82821015611ab457838260020201600280602002604051908101604052809291908260028015611aa0576020028201915b815481526020019060010190808311611a8c575b505050505081526020019060010190611a5b565b5050505090506001604051825151815260208351015160208201527f077da99d806abd13c9f15ece5398525119d11e11e9836b2ee7d23f6159ad87d460408201527f01485efa927f2ad41bff567eec88f32fb0a0f706588b4e41a8d587d008b7f8756060820152867f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010360808201526040808201606060408401600060075af18216915060408351608083600060065af182169150811515611b7557600080fd5b505060008090506000856040516020018082600260200280838360005b83811015611bad578082015181840152602081019050611b92565b5050505090500191505060405160208183030381529060405280519060200120905060008090505b600880549050811015611c195781600882815481101515611bf257fe5b90600052602060002001541415611c0c5760019250611c19565b8080600101915050611bd5565b5081151515611c90576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4e6f6e636520616c7265616479207365656e210000000000000000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d79e8413846000600281101515611cdd57fe5b6020020151856001600281101515611cf157fe5b60200201518b8b6009548c8c6040518863ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018088600260200280838360005b83811015611d53578082015181840152602081019050611d38565b5050505090500187600260200280838360005b83811015611d81578082015181840152602081019050611d66565b5050505090500186600260200280838360005b83811015611daf578082015181840152602081019050611d94565b5050505090500185815260200184815260200183600260200280838360005b83811015611de9578082015181840152602081019050611dce565b5050505090500180602001828103825283818151815260200191508051906020019080838360005b83811015611e2c578082015181840152602081019050611e11565b50505050905090810190601f168015611e595780820380516001836020036101000a031916815260200191505b509850505050505050505060206040518083038186803b158015611e7c57600080fd5b505afa158015611e90573d6000803e3d6000fd5b505050506040513d6020811015611ea657600080fd5b81019080805190602001909291905050501515611f2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f4275726e2070726f6f6620766572696669636174696f6e206661696c6564210081525060200191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6006600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16896040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561202257600080fd5b505af1158015612036573d6000803e3d6000fd5b505050506040513d602081101561204c57600080fd5b810190808051906020019092919050505015156120b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001806126bf6034913960400191505060405180910390fd5b82600460008681526020019081526020016000209060026120d692919061249f565b508660036000828254039250508190555060088190806001815401808255809150509060018203906000526020600020016000909192909190915055507f40456e504254d84bf7f94f9976a7bf3b49907c184aa8097866e004497dcfe65b60405160405180910390a15050505050505050565b60056020528260005260406000208260028110151561216457fe5b600202018160028110151561217557fe5b0160009250925050505481565b60076020528060005260406000206000915090505481565b6000600254438115156121a957fe5b049050806007600084815260200190815260200160002054101561244d576121cf612573565b604080519081016040528060046000868152602001908152602001600020600280602002604051908101604052809291906000905b8282101561225d57838260020201600280602002604051908101604052809291908260028015612249576020028201915b815481526020019060010190808311612235575b505050505081526020019060010190612204565b50505050815260200160056000868152602001908152602001600020600280602002604051908101604052809291906000905b828210156122e9578382600202016002806020026040519081016040528092919082600280156122d5576020028201915b8154815260200190600101908083116122c1575b505050505081526020019060010190612290565b505050508152509050600160405182515151815260208351510151602082015260208301515151604082015260208084015151015160608201526040835151608083600060065af1821691506020835101515181526020808451015101516020820152602080840151015151604082015260208060208501510151015160608201526040602084510151608083600060065af18216915081151561238c57600080fd5b505080600060028110151561239d57fe5b6020020151600460008581526020019081526020016000209060026123c392919061249f565b5060408051908101604052806040805190810160405280600060010281526020016000600102815250815260200160408051908101604052806000600102815260200160006001028152508152506005600085815260200190815260200160002090600261243292919061249f565b50816007600085815260200190815260200160002081905550505b80600954101561246d57806009819055506008600061246c91906125a2565b5b5050565b6080604051908101604052806002905b612489612551565b8152602001906001900390816124815790505090565b826002800281019282156124de579160200282015b828111156124dd578251829060026124cd9291906125c3565b50916020019190600201906124b4565b5b5090506124eb9190612603565b5090565b6040805190810160405280600290602082028038833980820191505090505090565b8260028101928215612540579160200282015b8281111561253f578251825591602001919060010190612524565b5b50905061254d919061262f565b5090565b6040805190810160405280600290602082028038833980820191505090505090565b610100604051908101604052806002905b61258c612654565b8152602001906001900390816125845790505090565b50805460008255906000526020600020908101906125c0919061262f565b50565b82600281019282156125f2579160200282015b828111156125f15782518255916020019190600101906125d6565b5b5090506125ff919061262f565b5090565b61262c91905b80821115612628576000818161261f9190612682565b50600201612609565b5090565b90565b61265191905b8082111561264d576000816000905550600101612635565b5090565b90565b6080604051908101604052806002905b61266c612551565b8152602001906001900390816126645790505090565b50600081556001016000905556fe456c6c6970746963206375727665206f7065726174696f6e73206661696c7572652e2042616420706f696e74733f546869732073686f756c646e2774206661696c2e2e2e20536f6d657468696e672077656e74207365766572656c792077726f6e6746756e642070757368657320636f6e74726163742070617374206d6178696d756d2076616c75652e5472616e736665722070726f6f6620766572696669636174696f6e206661696c656421a165627a7a72305820c10603ccfa975f3966ea1dee5fde17e6271b9a3edc8d3b2a8482b3365750d6af0029608060405234801561001057600080fd5b506105e9806100206000396000f3fe608060405234801561001057600080fd5b5060043610610053576000357c0100000000000000000000000000000000000000000000000000000000900480631659e67d14610058578063d79e84131461025c575b600080fd5b610242600480360361014081101561006f57600080fd5b810190808035906020019064010000000081111561008c57600080fd5b82018360208201111561009e57600080fd5b803590602001918460408302840111640100000000831117156100c057600080fd5b9091929391929390803590602001906401000000008111156100e157600080fd5b8201836020820111156100f357600080fd5b8035906020019184604083028401116401000000008311171561011557600080fd5b90919293919293908035906020019064010000000081111561013657600080fd5b82018360208201111561014857600080fd5b8035906020019184604083028401116401000000008311171561016a57600080fd5b9091929391929390806040019091929192908035906020019064010000000081111561019557600080fd5b8201836020820111156101a757600080fd5b803590602001918460408302840111640100000000831117156101c957600080fd5b90919293919293908035906020019092919080604001909192919290803590602001906401000000008111156101fe57600080fd5b82018360208201111561021057600080fd5b8035906020019184600183028401116401000000008311171561023257600080fd5b909192939192939050505061032a565b604051808215151515815260200191505060405180910390f35b610310600480360361016081101561027357600080fd5b81019080806040019091929192908060400190919291929080604001909192919290803590602001909291908035906020019092919080604001909192919290803590602001906401000000008111156102cc57600080fd5b8201836020820111156102de57600080fd5b8035906020019184600183028401116401000000008311171561030057600080fd5b9091929391929390505050610476565b604051808215151515815260200191505060405180910390f35b6000806060600973ffffffffffffffffffffffffffffffffffffffff16600036604051808383808284378083019250505092505050600060405180830381855afa9150503d806000811461039a576040519150601f19603f3d011682016040523d82523d6000602084013e61039f565b606091505b509150915081801561044e575060017f0100000000000000000000000000000000000000000000000000000000000000028160038151811015156103df57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b1561045e57600192505050610465565b6000925050505b9d9c50505050505050505050505050565b6000806060600a73ffffffffffffffffffffffffffffffffffffffff16600036604051808383808284378083019250505092505050600060405180830381855afa9150503d80600081146104e6576040519150601f19603f3d011682016040523d82523d6000602084013e6104eb565b606091505b509150915081801561059a575060017f01000000000000000000000000000000000000000000000000000000000000000281600381518110151561052b57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b156105aa576001925050506105b1565b6000925050505b9897505050505050505056fea165627a7a72305820680c00e4bd6dfc682aa0d500a2a49ca9b5045e3f696a87e35dea688acf8245e10029',
            gas: '4700000'
        },
        function(e, contract) {
            console.log(e, contract);
            if (typeof contract.address !== 'undefined') {
                console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
            }
        })
    return zsc;
}

function _recoverZSC(address) {
    var zsc = zscContract.at(address);
    return zsc;
}

var demo = (function() {
    return {
        deployZSC: function(coin) {
            return _deployZSC(coin);
        },
        recoverZSC: function(address) {
            return _recoverZSC(address);
        },
    };
})();


function tracker(zsc) {
    var that = this;

    var zsc = zsc;
    var keypair = zether.createAccount(); // private
    var yHash = web3.sha3(keypair['y'][0].slice(2) + keypair['y'][1].slice(2), { encoding: 'hex' });
    var friends = {};
    var table = {}; // key: txHash of a transfer that _I_ originated, value: callback.
    var epochLength = zsc.epochLength(); // could retain this locally

    var state = function() {
        this.available = 0; // reflects WOULD-BE value in acc (i.e., if rollOver were called). do not touch this manually
        this.pending = 0; // represents an estimate of pTransfers alone. this is used to speed up peeking when transfers are received
        this.nonceUsed = false;
        this.lastRollOver = 0; // would it make sense to just pull this directly every time...?!
    }
    this.state = new state();

    var getEpoch = function(blockNumber) {
        return Math.floor((blockNumber === undefined ? eth.blockNumber + 1 : blockNumber) / epochLength);
    }

    var match = function(address, candidate) {
        return address[0] == candidate[0] && address[1] == candidate[1];
    } // consider refactoring / eliminating this, e.g. using JSON.stringify

    var away = function() { return Math.ceil((eth.blockNumber + 1) / epochLength) * epochLength - (eth.blockNumber + 1); }

    var simulateAccount = function(address) { // "baby" version of the below which will be used for _foreign_ accounts.
        var yHash = web3.sha3(address[0].slice(2) + address[1].slice(2), { encoding: 'hex' });
        var updated = new state();
        updated.acc = [
            [zsc.acc(yHash, 0, 0), zsc.acc(yHash, 0, 1)],
            [zsc.acc(yHash, 1, 0), zsc.acc(yHash, 1, 1)]
        ];
        if (zsc.lastRollOver(yHash) < getEpoch()) {
            var pTransfers = [
                [zsc.pTransfers(yHash, 0, 0), zsc.pTransfers(yHash, 0, 1)],
                [zsc.pTransfers(yHash, 1, 0), zsc.pTransfers(yHash, 1, 1)]
            ];
            updated.acc = zether.add(updated.acc, pTransfers);
        }
        return updated;
    }

    this.simulateBalances = function(blockNumber) {
        var updated = new state();
        updated.available = this.state.available;
        updated.pending = this.state.pending;
        updated.nonceUsed = this.state.nonceUsed;
        updated.lastRollOver = getEpoch(blockNumber)

        if (this.state.lastRollOver < updated.lastRollOver) {
            // if you're _receiving_ a transfer _and_ your account _was stale_, then whoever just sent you something
            // necessarily rolled you over _BEFORE_ depositing an extra amount into your pTransfers.
            // therefore folding this stuff in would lead to an innacurate representation of your account state.
            updated.available += updated.pending;
            updated.pending = 0;
            updated.nonceUsed = false;
        }
        return updated;
    }

    zsc.TransferOccurred(function(error, event) { // automatically watch for incoming transfers
        if (error) {
            console.log("Error: " + error);
        } else if (event.transactionHash in table) {
            table[event.transactionHash]();
        } else {
            for (var i = 0; i < event.args['parties'].length; i++) { // (var party in event.args['parties']) { // var in doesn't work for nested arrays?
                if (that.mine(event.args['parties'][i])) { // weird: this will trigger even when you were the sender.
                    that.state = that.simulateBalances(event.blockNumber);
                    if (that.check()) // if rollOver happens remotely, will mimic it locally, and start from 0
                        console.log("Transfer received! New balance is " + (that.state.available + that.state.pending) + ".");
                    // interesting: impossible even to know who sent you funds.
                    // could always report back msg.sender, but that means nothing basically. can always send from different eth address
                    break;
                }
            }
        }
    });

    // todo: add a way to generate throwaway addresses (for receiving), as well as to consolidate throwaways.

    this.me = function() { return keypair.y }

    this.secret = function() { return keypair.x; }

    this.mine = function(address) { return match(address, keypair['y']); }

    this.friend = function(name, address) {
        friends[name] = address;
        return "Friend added.";
    }

    this.balance = function() { return this.state.available + this.state.pending; }

    this.friends = function() { return friends; }

    this.check = function() { // would save a few dereferences to pass in the state, but...
        var pending = this.state.pending;
        var pTransfers = [
            [zsc.pTransfers(yHash, 0, 0), zsc.pTransfers(yHash, 0, 1)],
            [zsc.pTransfers(yHash, 1, 0), zsc.pTransfers(yHash, 1, 1)]
        ];
        this.state.pending = zether.readBalance(pTransfers, keypair['x'], this.state.pending, 4294967295);
        return this.state.pending > pending; // just a shortcut
    }

    this.deposit = function(value) {
        var state = this.simulateBalances();
        var events = zsc.FundOccurred();
        var timer = setTimeout(function() {
            events.stopWatching();
            console.log("Deposit failed...")
        }, 5000);
        zsc.fund(keypair['y'], value, { from: eth.accounts[0], gas: 5470000 }, function(error, txHash) {
            if (error) {
                console.log("Error: " + error);
            } else {
                events.watch(function(error, event) {
                    if (error) {
                        console.log("Error: " + error);
                    } else if (txHash == event.transactionHash) {
                        clearTimeout(timer);
                        state.available += value;
                        that.state = state;
                        console.log("Deposit of " + value + " was successful. Balance is now " + (state.available + state.pending) + ".");
                        events.stopWatching();
                    }
                });
            }
        });
        return "Initiating deposit.";
    }

    this.transfer = function(name, value, decoys) { // assuming the names of the other people in the anonymity set are being provided?
        var state = this.simulateBalances();
        if (value > state.available + state.pending)
            throw "Requested transfer amount of " + value + " exceeds account balance of " + (state.available + state.pending) + ".";
        else {
            var wait = away();
            var plural = wait == 1 ? "" : "s";
            if (value > state.available)
                throw "Requested transfer amount of " + value + " exceeds presently available balance of " + state.available + ". Please wait until the next rollover (" + wait + " block" + plural + " away), at which point you'll have " + (state.available + state.pending) + " available.";
            else if (state.nonceUsed)
                throw "You've already made a transfer/withdrawal during this epoch! Please wait till the next one, " + wait + " block" + plural + " away.";
        }
        if (decoys && decoys.length % 2 == 1)
            throw "Please choose a decoys set of even length (add one or remove one)."

        if (!(name in friends))
            throw "Name \"" + name + "\" hasn't been friended yet!";
        var y = [this.me()].concat([friends[name]]); // not yet shuffled
        for (var i = 0; i < (decoys ? decoys.length : 0); i++) {
            if (!(decoys[i] in friends))
                throw "Decoy \"" + decoys[i] + "\" is unknown in friends directory!";
            y.push(friends[decoys[i]])
        }

        var index = [];
        var m = y.length;
        while (m != 0) { // https://bost.ocks.org/mike/shuffle/
            var i = Math.floor(Math.random() * m--);
            var temp = y[i];
            y[i] = y[m];
            y[m] = temp;
            if (this.mine(temp))
                index[0] = m;
            else if (match(temp, friends[name]))
                index[1] = m;
        } // shuffle the array of y's
        if (index[0] % 2 == index[1] % 2) {
            var temp = y[index[1]];
            y[index[1]] = y[index[1] + (index[1] % 2 == 0 ? 1 : -1)];
            y[index[1] + (index[1] % 2 == 0 ? 1 : -1)] = temp;
            index[1] = index[1] + (index[1] % 2 == 0 ? 1 : -1);
        } // make sure you and your friend have opposite parity

        var CL = [];
        var CR = [];
        for (var i = 0; i < y.length; i++) { // (var address in y) { // could use an array.map if i had a better javascript shell.
            var updated = simulateAccount(y[i]);
            CL.push(updated.acc[0]);
            CR.push(updated.acc[1]);
        }

        var proof = zether.proveTransfer(CL, CR, y, state.lastRollOver, keypair['x'], value, state.available - value, index);
        var timer = setTimeout(function() {
            console.log("Transfer failed...");
            // can't, but don't actually need to, delete txHash from the table.
        }, 5000);
        account = web3.personal.newAccount(""); // this takes a while... :(
        web3.personal.unlockAccount(account, "", 0); // this takes a while... :(
        zsc.transfer(proof["L"], proof["R"], y, proof['u'], proof['proof'], { from: account, gas: 5470000 }, function(error, txHash) {
            if (error) {
                console.log("Error: " + error);
            } else {
                table[txHash] = function(error, event) { // event arg not used?
                    if (error) {
                        console.log("Error: " + error);
                    } else {
                        clearTimeout(timer);
                        state.nonceUsed = true;
                        state.pending -= value;
                        that.state = state;
                        console.log("Transfer of " + value + " was successful. Balance now " + (state.available + state.pending) + ".");
                    }
                };
            }
        });
        return "Initiating transfer.";
    }

    this.withdraw = function(value) {
        var state = this.simulateBalances();
        if (value > state.available + state.pending)
            throw "Requested withdrawal amount of " + value + " exceeds account balance of " + (state.available + state.pending) + ".";
        else {
            var wait = away();
            var plural = wait == 1 ? "" : "s";
            if (value > state.available)
                throw "Requested withdrawal amount of " + value + " exceeds presently available balance of " + state.available + ". Please wait until the next rollover (" + wait + " block" + plural + " away), at which point you'll have " + (state.available + state.pending) + " available.";
            else if (state.nonceUsed)
                throw "You've already made a transfer/withdrawal during this epoch! Please wait till the next one, " + wait + " block" + plural + " away.";
        }
        var updated = simulateAccount(keypair['y']);
        var proof = zether.proveBurn(updated.acc[0], updated.acc[1], keypair['y'], value, state.lastRollOver, keypair['x'], state.available - value);
        var events = zsc.BurnOccurred();
        var timer = setTimeout(function() {
            events.stopWatching();
            console.log("Withdrawal failed...")
        }, 5000);
        zsc.burn(keypair['y'], value, proof['u'], proof['proof'], { from: eth.accounts[0], gas: 5470000 }, function(error, txHash) {
            if (error) {
                console.log("Error: " + error);
            } else {
                events.watch(function(error, event) {
                    if (error) {
                        console.log("Error: " + error);
                    } else if (txHash == event.transactionHash) {
                        clearTimeout(timer);
                        state.available -= value;
                        state.nonceUsed = true; // or: after confirming, that.state.nonceUsed = true.
                        that.state = state;
                        console.log("Withdrawal of " + value + " was successful. Balance now " + (state.available + state.pending) + ".");
                        events.stopWatching();
                    }
                });
            }
        });
        return "Initiating withdrawal.";
    }

    var register = zsc.RegistrationOccurred();
    var timer = setTimeout(function() {
        register.stopWatching();
        console.log("Initial registration failed...!")
    }, 5000);
    register.watch(function(error, event) {
        if (error) {
            console.log("Error: " + error);
        } else if (that.mine(event.args['registerer'])) {
            clearTimeout(timer);
            if (event.args['addr'] != eth.accounts[0]) {
                console.log("Registration process compromised! Create a new tracker and do not use this one.");
            } else {
                console.log("Initial registration successful.");
            }
            register.stopWatching();
        }
    });
    zsc.register(keypair['y'], { from: eth.accounts[0], gas: 5470000 });
}